$define RELEASE_VERSION "1.3.0.13"
$define RELEASE_DATE    "June 13, 2017"

# TODO:
# - Develop a better default operator==() for compounds - memcmp isn't robust, use piecewise comparisons
# - Warn on assignment of intermediate value compound

$include "Attributes.rogue"
$include "CPPWriter.rogue"
$include "CythonPlugin.rogue"
$include "PythonPlugin.rogue"
$include "CloneArgs.rogue"
$include "Cmd.rogue"
$include "Local.rogue"
$include "Method.rogue"
$include "Parser.rogue"
$include "Plugin.rogue"
$include "Preprocessor.rogue"
$include "Program.rogue"
$include "Property.rogue"
$include "RogueError.rogue"
$include "Scope.rogue"
$include "Template.rogue"
$include "Token.rogue"
$include "TokenReader.rogue"
$include "TokenType.rogue"
$include "Tokenizer.rogue"
$include "Type.rogue"
$include "Visitor.rogue"
$include "Visitors.rogue"

RogueC.launch


class GCMode
  ENUMERATE
    MANUAL
    AUTO
    BOEHM
    BOEHM_TYPED
endClass

class ThreadMode
  ENUMERATE
    NONE
    PTHREADS
endClass


class RogueC [singleton]
  PROPERTIES
    included_files              = String[]
    manually_included_files     = Set<<String>>() # Full paths of files that were on commandline
    prefix_path_list   = String[]
    prefix_path_lookup = Table<<String,Logical>>()
    compile_targets    = Table<<String,Logical>>()
    target_list        = String[]
    libraries_folder   = ""

    source_files    = String[]
    generate_main   : Logical
    first_filepath  : String
    output_filepath : String

    supported_targets      = String[]
    essential_declarations = String[]

    all_essential = false
    # If true everything is essential

    all_api = false
    # If true everything is marked as an API

    essential_files        = Set<<String>>()
    # Everything in these files will be essential

    manual_files_essential = false
    # If true, all files in commandline will be essential

    all_methods_callable_dynamically = false
    # When true, all methods can be called dynamically

    compile_output    : Logical
    compiler_name     : String
    execute_args      : String

    package_name      : String

    debug_mode    : Logical
    run_tests     : Logical
    print_version : Logical

    parsers = Parser[]
    # One parser is created for every file and all parsers are prepped with tokens
    # before any parser parses its elements.  This allows all tokens to be filtered
    # a final time after tokenization to facilitate 'module' and 'using' directives.

    scanners_by_filepath = Table<<String,Scanner>>()
    stopwatch : Stopwatch

    gc_mode = GCMode.AUTO    : Int32
    gc_threshold = 1024*1024 : Int32

    thread_mode = ThreadMode.NONE : Int32

    plugins = Plugin[]

    using_ide : String

  METHODS
    method init

    method launch
      local libs = File.path(System.executable_filepath) + "/Libraries/"
      if (File.exists(libs))
        libraries_folder = libs
        prefix_path_list.add( libs )
        prefix_path_lookup[ libs ] = true
      endIf

      try
        process_command_line_arguments

        <collect_supported_targets>
        forEach (plugin in plugins) plugin.collect_supported_targets

        if (source_files.count == 0)
          if (print_version)
            # Print version and date only and exit
            print( 'v' ).println( RELEASE_VERSION )
            println RELEASE_DATE
            System.exit( 0 )
          endIf

          println
          println "Rogue Compiler v" + RELEASE_VERSION
          println RELEASE_DATE

          local usage =
                  @|
                   |USAGE
                   |  roguec [options] file1.rogue [file2.rogue ...]
                   |
                   |OPTIONS
                   |  --api
                   |    Mark all classes as [api] - all methods of any referenced class are included
                   |    in the compiled program whether they're used or not.
                   |
                   |  --compile[=<compiler invocation>]
                   |    Creates an executable from the compiled .rogue code - for example, compiles
                   |    and links the .cpp code generated from the .rogue program.  Automatically
                   |    enables the --main option.  If <compiler invocation> is omitted then a
                   |    language-specific default is used - for a C++ code target this is the
                   |    Makefile-default $(CXX) compiler with certain options - see DEFAULT_CXX in
                   |    the Rogue source folder's Makefile.
                   |
                   |  --debug
                   |    Enables exception stack traces.
                   |
                   |  --define="name[:value]"
                   |    Adds a single preprocessor define.
                   |    Defining "name:value" is equivalent to: $define name value
                   |    Defining "name" is equivalent to:       $define name true
                   |
                   |  --execute[="args"]
                   |    Use command line directives to compile and run the output of the
                   |    compiled .rogue program.  Automatically enables the --main option.
                   |
                   |  --exhaustive
                   |    Make every class and method [essential].
                   |
                   |  --gc[=auto|manual|boehm|boehm-typed]
                   |    Set the garbage collection mode:
                   |      --gc=auto        - Rogue collects garbage as it executes.  Slower than
                   |                         'manual' without optimizations enabled.
                   |      --gc=manual      - Rogue_collect_garbage() must be manually called
                   |                         in-between calls into the Rogue runtime.
                   |      --gc=boehm       - Uses the Boehm garbage collector.  The Boehm's GC
                   |                         library must be obtained separately and linked in.
                   |      --gc=boehm-typed - Like boehm, but provides type info to the collector.
                   |
                   |  --gc-threshold={number}[MB|K]
                   |    Specifies the default garbage collection threshold of the compiled program.
                   |    Default is 1MB.  If neither MB nor K is specified then the number is
                   |    assumed to be bytes.
                   |
                   |  --help
                   |    Shows help (you're reading it).
                   |
                   |  --ide[=<IDE Name>]
                   |    Indicates that roguec is being invoked from an IDE.  Currently this causes
                   |    error messages to print out in a "classic" C style, which Xcode (and
                   |    possibly other IDEs) will automatically pick up and display.
                   |
                   |  --libraries="path1[;path2...]"
                   |    Add one or more additional library folders to the search path.
                   |
                   |  --main
                   |    Include a main() function in the output file.
                   |
                   |  --output=destpath/[filename]
                   |    Specify the destination folder and optionally the base filename for the
                   |    output.
                   |
                   |  --essential=[ClassName|ClassName.method_name(ParamType1,ParamType2,...)],...
                   |    Makes the given class or method essential ("do not cull if unused").
                   |    See also: --exhaustive
                   |
                   |  --essential-file[=file.rogue]
                   |    With an argument, makes the entire file essential.  With no argument,
                   |    all files explicitly listed on the commandline become essential.
                   |
                   |  --target=

                   # --target info filled in below

                   #|  --package=com.developer.app [Java only]

          usage += supported_targets->String.replacing("]",",...]\n")

          usage += @|    Specify one or more compile targets that are used with conditional code
                    |    compilation ('$if ("C++") ...').  C++ is the only supported language
                    |    target.  "Python" and "Cython" are optional plug-in targets.  Arbitrary
                    |    platforms may be added at will, e.g. "iOS", "macOS", etc.
                    |
                    |  --test
                    |    Compiled program includes any defined unit tests and runs them on launch.
                    |    Enables --debug automatically.
                    |
                    |  --threads=[none|pthreads]
                    |    Set the threading mode:
                    |      --threads=none     - No multithreading support.
                    |      --threads=pthreads - Multithreading based on pthreads.
                    |
                    |  --version
                    |    Print the version number and release date.
          println usage
          System.exit( 1 )
        endIf

        if (target_list.count == 0) target_list.add( "C++" )
        <validate_target_list>

        forEach (target in target_list)
          compile_targets[target] = true
        endForEach

        Program.configure

        stopwatch = Stopwatch()

        first_filepath = source_files.first
        include_source( "Standard/NativeCode.rogue", &do_not_save_prefix )
        forEach (filepath in source_files)
          include_source( filepath )
        endForEach
        include_source( "Standard" )

        forEach (parser in parsers) parser.insert_module_prefixes
        forEach (parser in parsers) parser.parse_elements

        # Add essential declarations to Program's essential list
        local t = TokenType("Internal").create_token( "[Command Line Arguments]", 0, 0 )
        forEach (declaration in essential_declarations)
          Program.get_on_launch_method( t ).statements.add( CmdMakeRequisite(t,declaration) )
        endForEach

        if (manual_files_essential) essential_files.union_update( manually_included_files )

        Program.resolve
        local type_TypeInfo = Program.find_type( "TypeInfo" )
        if (type_TypeInfo) type_TypeInfo.simplify_name = true  # TODO: add general mechanism for having classes simplify their names

        write_output

      catch (err:RogueError)
        if (using_ide) Console.error.println "$:$: error:$" (err.filepath,err.line,err.message)
        else           println err
        System.exit(1)

      catch (err:Error)
        if (using_ide) Console.error.println "(Unknown Location):0: error:$" (err.message)
        else           println err
        System.exit(1)
      endTry

    method write_output
      <target_specific_code>
      throw RogueError( ''Compile target "$" is not supported.'' (target_list) )

    method on_compile_finished
      println "SUCCESS ($)" (stopwatch)

    method find_source_file( t:Token, filepath:String )->File
      if (t)
        # Try to fit new filepath onto end of context filepath.
        local context_path = t.filepath.replacing('\\','/').split('/')
        context_path.remove_last
        local include_path = filepath.replacing('\\','/').split('/')
        local filename = include_path.remove_last
        local new_path = context_path.cloned
        while (context_path.count and include_path.count and context_path.last == include_path.last)
          include_path.remove_last
          context_path.remove_last
        endWhile
        if (include_path.count == 0)
          new_path.add( filename )
          local new_filepath = new_path.join( '/' )
          if (File.exists(new_filepath)) filepath = new_filepath
        endIf
      endIf

      local file = File(filepath)

      if (File.exists(filepath+".rogue"))
        filepath += ".rogue"
        file = File( filepath )
      endIf

      if (not file.exists)
        forEach (prefix in prefix_path_list)
          local prefixed_filepath = prefix + filepath
          local prefixed_file = File( prefixed_filepath )
          if (File.exists(prefixed_filepath+".rogue"))
            filepath = prefixed_filepath + ".rogue"
            file = File( filepath )
            escapeForEach
          elseIf (prefixed_file.exists)
            filepath = prefixed_filepath
            file = prefixed_file
            escapeForEach
          endIf
        endForEach
      endIf

      if (not file.exists)
        return null
      endIf

      if (file.is_folder)
        local path2 = "$/$.rogue" (filepath,file.filename)
        local file2 = File( path2 )
        if (not file2.exists or file2.is_folder)
          return null
        else
          if (not prefix_path_lookup.contains(file.filepath))
            prefix_path_lookup[file.filepath] = true
            prefix_path_list.add( file.filepath )
          endIf
          filepath = path2
          file = file2
        endIf
      endIf

      return file

    method include_source( filepath:String, &do_not_save_prefix )
      include_source( null, filepath, do_not_save_prefix )

    method include_source( t:Token, filepath:String, &do_not_save_prefix )
      # Preemptively (immediately) parses the given file.
      local file = find_source_file(t,filepath)

      if (file is null)
        local mesg = ''No such file "$".'' (filepath)
        if (t) throw t.error( mesg )
        else   throw RogueError( mesg )
      endIf

      filepath = file.absolute_filepath
      if (included_files.contains(filepath)) return

      included_files.add( filepath )
      if (t is null) manually_included_files.add( filepath )

      if (not do_not_save_prefix)
        local prefix = filepath.before_last('/') + "/"
        if (not prefix_path_lookup.contains(prefix))
          prefix_path_lookup[prefix] = true
          prefix_path_list.add( prefix )
        endIf
      endIf

      parsers.add( Parser( filepath ) )

    method include_native( t:Token, filepath:String, native_type:String )
      local file = File(filepath)

      if (not file.exists)
        forEach (prefix in prefix_path_list)
          local prefixed_filepath = prefix + filepath
          local prefixed_file = File( prefixed_filepath )
          if (prefixed_file.exists)
            filepath = prefixed_filepath
            file = prefixed_file
            escapeForEach
          endIf
        endForEach
      endIf

      if (not file.exists)
        local mesg = ''No such file "$".'' (filepath)
        if (t) throw t.error( mesg )
        else   throw RogueError( mesg )
      endIf

      if (file.is_folder)
        local mesg = ''Cannot target folder "$" for a native include.'' (file.filepath)
        if (t) throw t.error( mesg )
        else   throw RogueError( mesg )
      endIf

      filepath = file.absolute_filepath
      if (included_files.contains(filepath)) return

      included_files.add( filepath )

      local prefix = filepath.before_last('/') + "/"
      if (not prefix_path_lookup.contains(prefix))
        prefix_path_lookup[prefix] = true
        prefix_path_list.add( prefix )
      endIf

      if (native_type == "header")
        forEach (line in LineReader(file))
          Program.native_header.add( line )
        endForEach
      else
        forEach (line in LineReader(file))
          Program.native_code.add( line )
        endForEach
      endIf

    method process_command_line_arguments
      forEach (arg in System.command_line_arguments)
        local value = arg.after_first('=')
        arg = arg.before_first('=')
        if (arg.begins_with("--"))
          # Option
          which (arg)
            case "--help"
              source_files.clear
              return

            case "--output"
              if (value.count == 0) throw RogueError( ''Output filepath expected after "--output=".'' )
              output_filepath = value

            case "--compile"
              generate_main = true
              compile_output = true
              if (value.count) compiler_name = value

            case "--execute"
              generate_main = true
              compile_output = true
              execute_args = value

            case "--debug"
              debug_mode = true

            case "--define"
              if (not value.count) throw RogueError( ''Expected "name" or "name:value" after "--define=".'' )
              local i = value.locate( ':' )
              if (not i)
                Preprocessor.define( value, "true" )
              else
                Preprocessor.define( value.before_first(':'), value.after_first(':') )
              endIf

            case "--exhaustive"
              if (value.count)
                throw RogueError( ''"--exhaustive" takes no arguments.'' )
              else
                all_essential = true
                all_api = true
              endIf

            case "--ide"
              if (value.count)
                using_ide = value
              else
                using_ide = "Unknown"
              endIf

            case "--main"
              if (value.count) throw RogueError( "Unexpected value for '--main' option." )
              generate_main = true

            case "--libraries"
              if (not value.count) throw RogueError( ''One or more paths expected after "--libraries=".'' )
              forEach (path in value.split(';'))
                if (not File.exists(path))
                  throw RogueError( ''--libraries option specifies non-existent folder "$".'' (path) )
                endIf
                if (File.is_folder(path))
                  if (not path.ends_with('/')) path += '/'
                  if (not prefix_path_lookup.contains(path))
                    prefix_path_list.add( path )
                    prefix_path_lookup[ path ] = true
                  endIf
                else
                  source_files.add( path )
                endIf
              endForEach

            case "--main"
              if (value.count) throw RogueError( "Unexpected value for '--main' option." )
              generate_main = true

            case "--package"
              if (not value.count)
                throw RogueError( ''Java package name expected after "--package=" (e.g. "com.developer.app").'' )
              endIf
              package_name = value

            case "--api"
              if (value.count)
                throw RogueError( ''"--api" takes no arguments.'' )
              else
                all_api = true
              endIf

            case "--essential"
              if (value.count == 0 or value == "*")
                all_essential = true
              elseIf (value == "**")
                all_essential = true
                all_api = true
              else
                essential_declarations.add( value.split(',') )
              endIf

            case "--essential-file"
              if (value.count)
                local file = find_source_file(null,value)
                if (file is null)
                  throw RogueError( ''Can not find file "$" for "--essential-file".'' (value) )
                endIf
                essential_files.add( file.absolute_filepath )
                source_files.add( file.absolute_filepath )
              else
                manual_files_essential = true
              endIf

            case "--target"
              if (not value.count)
                throw RogueError( ''One or more comma-separated target names expected after "--target=" (e.g. "C++").'' )
              endIf
              target_list.add( value.split(',') )

            case "--gc"
              if ((not value.count) or value == "auto")
                # Default to AUTO if nothing specified
                gc_mode = GCMode.AUTO
              elseIf (value == "manual")
                gc_mode = GCMode.MANUAL
              elseIf (value == "boehm")
                gc_mode = GCMode.BOEHM
              elseIf (value == "boehm-typed")
                gc_mode = GCMode.BOEHM_TYPED
              else
                throw RogueError( 'Unknown GC mode (--gc=$)' (value) )
              endIf

            case "--gc-threshold"
              if (not value.count)
                throw RogueError( ''A value such as 1.1MB, 512K, or 65536 expected after "--gc-threshold=".'' )
              endIf
              value = value.to_lowercase
              local n = value->Real64
              if (value.ends_with('m') or value.ends_with("mb")) n *= 1024*1024
              elseIf (value.ends_with('k') or value.ends_with("kb")) n *= 1024
              local thresh = n->Int32
              if (thresh < 1) thresh = 0x7fffffff
              gc_threshold = thresh

            case "--threads"
              if ((not value.count) or value == "pthreads")
                # Default to pthreads if nothing specified
                thread_mode = ThreadMode.PTHREADS
              elseIf (value == "none")
                thread_mode = ThreadMode.NONE
              else
                throw RogueError( 'Unknown threads mode (--threads=$)' (value) )
              endIf

            case "--plugin-test"
              plugins.add(
                Plugin( "Test" ).on_generate_additional_types(
                  function->(Logical)
                  @trace "All types resolved - generate additional types?"
                    if (not Program.find_type("Alpha"))
                      local src = @|class Alpha [essential singleton]
                                   |  METHODS
                                   |    method init
                                   |      @trace "Alpha singleton instantiated!"
                                   |endClass
                      println "Yes - compiling type Alpha:"
                      println src
                      Parser( "(compiler-generated)", src ).parse_elements
                      return true
                    else
                      println "No"
                      return false
                    endIf
                  endFunction
                )
              )

            case "--test"
              run_tests = true
              debug_mode = true

            case "--version"
              if (value.count)
                throw RogueError( ''Unexpected argument to --version option.'' )
              endIf
              print_version = true

            others
              throw RogueError( "Unknown option '$'." (arg) )

          endWhich
        else
          # Input Filename
          source_files.add( arg )
        endIf
      endForEach

      Preprocessor.define( "DEBUG", debug_mode->String )
      Preprocessor.define( "THREAD_MODE", thread_mode->String )

    method require_valueless( arg:String, expecting:String )
      if (arg == expecting) return
      if (arg.contains('=')) throw RogueError( "Unexpected value for command line argument '$'." (expecting) )

endClass

#{
                   |      manual - A GC cannot happen while Rogue-generated code is executing.
                   |               After control returns to C++, the main loop must call either
                   |               Rogue_collect_garbage() or Rogue_update_tasks() which will allow
                   |               the GC to run if it needs to.  Manual execution is typically
                   |               just slightly faster than auto.
                   |
                   |      auto   - Generated code code automatically checks for and performs a GC if
                   |               necessary as it runs and allocates objects.  Generated auto-GC
                   |               code should be compiled with -O3 to make its speed acceptable.
                   |
                   }#
