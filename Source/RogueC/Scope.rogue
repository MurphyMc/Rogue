class Scope
  ENUMERATE
    SUPPRESS_INHERITED  = 1
    CALLING_PRIOR_INIT  = 2

  PROPERTIES
    this_type      : Type
    this_method    : Method
    this_body      : CmdStatementList
    this_statement : Cmd
    implicit_type  : Type

    local_list = Local[]

    control_stack = CmdControlStructure[]

    macro_chain = Method[]

  METHODS
    method init( this_type, this_method )

    method find_local( name:String )->Local
      local i = local_list.count - 1
      while (i >= 0)
        if (local_list[i].name == name) return local_list[i]
        --i
      endWhile
      return null

    method find_type( name:String )->Type
      local type = Program.find_type( name )
      if (type) return type

      return null

    method push_local( v:Local, validate_name=true:Logical )
      if (validate_name)
        local existing = find_local( v.name )
        if (existing)
          throw v.t.error( ''A local variable named "$" already exists.'' (v.name) )
        endIf
      endIf
      local_list.add( v )

    method pop_local
      local_list.remove_last

    method set_implicit_type( new_implicit_type:Type )->Type
      local result = implicit_type
      @implicit_type = new_implicit_type
      return result

    method resolve_call( type_context:Type, access:CmdAccess, error_on_fail:Logical, flags=0:Int32 )->Cmd
      local is_initializer = (access.name == "init")

      local m = find_method( type_context, access, error_on_fail and access.context, flags )
      if (not m and not access.context)
        # No context specified; try Global context if error_on_fail is true, which means that we've
        # tried and failed to find locals and properties.
        if (error_on_fail and not is_initializer)
          m = find_method( Program.type_Global, access, false, flags )
        endIf
        if (m)
          type_context = Program.type_Global
          access.context = CmdReadSingleton( access.t, Program.type_Global )
        elseIf (error_on_fail)
          # Create an error message with the most appropriate context
          if (not is_initializer and Program.type_Global.has_method_named(access.name))
            find_method( Program.type_Global, access, true, flags )
          else
            find_method( type_context, access, true, flags )
          endIf
        endIf
      endIf

      if (not m) return null

      # resolve_call is called up to twice for a given access - once at the beginning to optionally try
      # and find a method before looking at locals and properties and once at the end to force an
      # error message since nothing else has been found.  Fallback methods are a subset of getters and
      # setters that should only be called if all else fails, so we can hook into the error_on_fail
      # flag to make that call.
      if (not error_on_fail and m.is_fallback and not m.type_context.is_aspect) return null

      local t = access.t

      local context = access.context
      if (not context)
        if (this_method.is_global and not m.is_global)
          # Calling a singleton method from a routine
          context = CmdReadSingleton( t, type_context )
        else
          context = CmdThisContext( t, type_context )
        endIf
      endIf

      local args = access.args
      if (not args) args = CmdArgs()

      # Validate args
      while (args.count < m.parameters.count)
        local param = m.parameters[ args.count ]

        # try to find a named arg for this position
        local named_arg : CmdNamedArg
        if (access.named_args)
          forEach (arg in access.named_args)
            if (arg.name == param.original_name)
              named_arg = arg
              access.named_args.remove( arg )
              escapeForEach
            endIf
          endForEach
        endIf

        if (named_arg)
          args.add( named_arg.to_value )
        else
          args.add( param.initial_value.cloned )
        endIf
      endWhile

      if (access.named_args and access.named_args.count)
        local arg = access.named_args.first
        throw arg.t.error( ''Called method does not have a parameter named '$'.'' (arg.name) )
      endIf

      args.resolve( this )

      forEach (i of args)
        args[i] = args[i].cast_to( m.parameters[i].type, this ).resolve( this )
      endForEach

      local cmd : Cmd
      if (m.is_global)
        # routine
        if (m.is_native)
          if (m.native_code)
            context = context.resolve( this )
            context.require_type_context
            cmd = CmdCallInlineNativeRoutine( t, m, args )
            if (m.native_return_type) cmd = cmd.cast_to( m.native_return_type, this )
          else
            cmd = CmdCallNativeRoutine( t, m, args )
          endIf

        elseIf (m.is_macro)
          if (macro_chain.contains(m)) throw t.error( "Illegal recursive macro definition." )
          macro_chain.add( m )

          local macro_args = MacroArgs( context, m, args )
          local inline_statements = CmdStatementList()
          forEach (statement in m.statements)
            local inline_statement = statement.cloned( macro_args, &new_t=t )
            if (inline_statement) inline_statements.add( inline_statement )
          endForEach

          inline_statements.resolve( this )
          macro_chain.remove( m )

          which (inline_statements.count)
            case 0
              if (m.return_type) throw t.error( "Missing return value in macro method." )
              return CmdInlineNative( t, "" ).resolve( this )
            case 1
              return inline_statements.first
            others
              throw t.error( "Only single line macros are supported." )
          endWhich

        else
          cmd = CmdCallRoutine( t, m, args )

        endIf

      else
        # method
        if (m.is_native)
          if (type_context.is_array)
            which (m.name)
              case "count"
                if (args and args.count) throw t.error( "Invalid arguments to array count." )
                return CmdReadArrayCount( t, context ).resolve( this )
              #others
                #throw t.error( "[INTERNAL] No compiler support for native Array call $." (m.signature) )
            endWhich
          endIf

          if (m.native_code)
            cmd = CmdCallInlineNativeMethod( t, context, m, args )
            if (m.native_return_type) cmd = cmd.cast_to( m.native_return_type, this )
          else
            cmd = CmdCallNativeMethod( t, context, m, args )
          endIf

        elseIf (m.is_macro)
          if (macro_chain.contains(m)) throw t.error( "Illegal recursive macro definition." )
          macro_chain.add( m )

          local macro_args = MacroArgs( context, m, args )
          local inline_statements = CmdStatementList()
          forEach (statement in m.statements)
            local inline_statement = statement.cloned( macro_args, &new_t=t )
            if (inline_statement) inline_statements.add( inline_statement )
          endForEach

          inline_statements.resolve( this )

          macro_chain.remove( m )

          which (inline_statements.count)
            case 0
              if (m.return_type) throw t.error( "Missing return value in macro method." )
              return CmdInlineNative( t, "" ).resolve( this )
            case 1
              return inline_statements.first
            others
              throw t.error( "Only single line macros are supported." )
          endWhich


        elseIf (type_context.is_aspect)
          cmd = CmdCallAspectMethod( t, context, m, args )

        else
          cmd = CmdCallDynamicMethod( t, context, m, args )
        endIf
      endIf

      return cmd.resolve( this )

    method find_method( type_context:Type, access:CmdAccess, error_on_fail:Logical, flags=0:Int32 )->Method
      local is_initializer = (access.name == "init")
      local suppress_inherited  = (flags & SUPPRESS_INHERITED)?

      local args = access.args
      if (args)
        args.resolve( this )
        forEach (arg in args) arg.type.organize
      endIf

      local candidates = Method[]

      local list = type_context.global_method_lookup_by_name[ access.name ]
      if (list) candidates.add(list)

      if (suppress_inherited and is_initializer)
        # Object constructor.  Also add global create() methods.
        list = type_context.global_method_lookup_by_name[ "create" ]
        if (list) candidates.add(list)
      endIf

      list = type_context.method_lookup_by_name[ access.name ]
      if (list) candidates.add(list)

      if (type_context.is_aspect)
        # For aspects, add methods from type Object as long as they are not
        # an exact signature match to any aspect methods
        list = Program.type_Object.method_lookup_by_name[ access.name ]
        if (list)
          forEach (m in list)
            contingent
              forEach (m2 in candidates)
                necessary (m.signature != m2.signature)
              endForEach
            satisfied
              candidates.add( m )
            endContingent
          endForEach
        endIf
      endIf

      local m = _real_find_method(candidates, type_context, access, false, flags, false)
      if (m) return m

      candidates.clear

      if (not type_context.method_templates.has_template(access.name))
        # No method templates to try to specialize -- we're done.
        # Call _real_find_method() with an empty list just to get the desired error behavior.
        return _real_find_method(null, type_context, access, error_on_fail, flags, false)
      endIf

      if (access.name.contains('<'))
        # Direct call to specialized method
        type_context.method_templates.instantiate( access.t, access.name, candidates )

        # Try again with any new methods
        return _real_find_method( candidates, type_context, access, error_on_fail, flags, false )
      endIf

      # Can we infer arguments to a method template?
      if (args is null or args.count == 0)
        # Nope -- no method arguments, so no basis for template parameter inference.
        # Call _real_find_method() with an empty list just to get the desired error behavior.
        return _real_find_method(null, type_context, access, error_on_fail, flags, false)
      endIf

      local types = Type[]
      types.add((forEach in args).type)

      type_context.method_templates.instantiate( access.t, access.name, types, candidates )
      return _real_find_method( candidates, type_context, access, error_on_fail, flags, true )

    method _real_find_method( list:Method[], type_context:Type, access:CmdAccess, error_on_fail:Logical, flags:Int32, inferring_templates:Logical )->Method
      local suppress_inherited  = (flags & SUPPRESS_INHERITED)?
      local calling_prior_init  = (flags & CALLING_PRIOR_INIT)?

      local candidates = CandidateMethods( type_context, access, error_on_fail, inferring_templates )

      local args = access.args

      local arg_count = select{ args:args.count || 0 }
      local named_arg_count = select{ access.named_args:access.named_args.count || 0 }
      local total_arg_count = arg_count + named_arg_count

      if (list) candidates.available.add( list )

      if (not candidates.refine_matches) return null

      if (calling_prior_init)
        # Discard init methods defined in the current type context in favor
        # of their overridden version
        forEach (m in candidates.available)
          if (m.type_context is type_context)
            if (m.overridden_method and not m.overridden_method.is_abstract)
              candidates.compatible.add( m.overridden_method )
            endIf
          else
            candidates.compatible.add( m )
          endIf
        endForEach
        if (not candidates.update_matches) return null
      endIf

      if (suppress_inherited or calling_prior_init)
        # Find method with most specific type context
        local most_specific_type : Type
        forEach (m in candidates.available)
          if (m.is_initializer or m.name=="create")
            local m_type_context = m.type_context
            if (most_specific_type is null or m_type_context.instance_of(most_specific_type))
              most_specific_type = m_type_context
            endIf
          endIf
        endForEach

        if (most_specific_type)
          # Keep only the initializer methods defined in the most specific type
          forEach (m in candidates.available)
            if (m.type_context is most_specific_type) candidates.compatible.add( m )
          endForEach
          if (not candidates.update_matches) return null
        endIf

      endIf

      forEach (m in candidates.available)
        forEach (param in m.parameters) param.type.organize
        if (m.accepts_arg_count(total_arg_count)) candidates.compatible.add( m )
      endForEach
      if (not candidates.update_matches) return null

      if (access.named_args)
        # Throw out any method that does not have one of the supplied named parameters
        forEach (m in candidates.available)
          contingent
            forEach (arg in access.named_args)
              block
                forEach (param at index in m.parameters)
                  if (param.original_name == arg.name)
                    if (not arg.inferred_index.exists)
                      arg.inferred_index = index
                    elseIf (arg.inferred_index.value != index)
                      arg.inferred_index = -1
                    endIf
                    escapeBlock
                  endIf
                endForEach
                necessary (false)  # failed to find named arg
              endBlock
            endForEach
            candidates.compatible.add( m )
          endContingent
        endForEach
        if (not candidates.update_matches) return null

        # Go ahead and place any named args that we've been able to infer the index of.
        # This only works if the arg belongs in the middle or at the end of existing
        # args - otherwise we have to wait until the end of the method so that default
        # parameter values can be filled in correctly.
        local named_args = access.named_args.remove( function(arg)=>arg.inferred_index.exists and arg.inferred_index.value != -1 )
        named_args.sort( function(a,b)=>a.inferred_index.value < b.inferred_index.value )
        forEach (named_arg in named_args)
          local index = named_arg.inferred_index.value
          if (index <= args.count)
            args.insert( named_arg.to_value.resolve(this), index )
          else
            access.named_args.add( named_arg )
          endIf
        endForEach

        arg_count = select{ args:args.count || 0 }
        named_arg_count = select{ access.named_args:access.named_args.count || 0 }
        total_arg_count = arg_count + named_arg_count

        # Throw out any method that has a non-default parameter that does not have either a regular
        # argument or a named argument.
        forEach (m in candidates.available)
          contingent
            forEach (param at index in m.parameters)
              sufficient (index < arg_count)
              sufficient (param.initial_value?)
              forEach (arg in access.named_args)
                sufficient (param.original_name == arg.name)
              endForEach
              escapeContingent
            endForEach

          satisfied
            candidates.compatible.add( m )
          endContingent
        endForEach
        if (not candidates.update_matches) return null
      endIf

      if (arg_count)
        # Exact arg type check
        forEach (m in candidates.available)
          contingent
            forEach (index of args)
              local arg_type = args[index].type
              local param_type = m.parameters[index].type
              necessary (arg_type is param_type)
            endForEach
          satisfied
            candidates.compatible.add( m )
          endContingent
        endForEach
        if (not candidates.refine_matches) return null

        # Match and specialize generic function arguments early on
        local has_generic_fn = false
        forEach (arg in args)
          if (arg.is_generic_function) has_generic_fn = true; escapeForEach
        endForEach

        if (has_generic_fn)
          local first_generic_fn_t : Token
          forEach (m in candidates.available)
            contingent
              forEach (index of args)
                local arg = args[index]
                if (arg.is_generic_function)
                  if (not first_generic_fn_t) first_generic_fn_t = arg.t
                  local fn = arg as CmdCreateFunction
                  local param_type = m.parameters[index].type
                  necessary (param_type.name.begins_with("Function("))

                  local callback_param_count = 0
                  if (param_type.callback_parameter_types) callback_param_count = param_type.callback_parameter_types.count
                  local fn_param_count = 0
                  if (fn.parameters) fn_param_count = fn.parameters.count
                  necessary (fn_param_count == callback_param_count)
                endIf
              endForEach
            satisfied
              candidates.compatible.add( m )
            endContingent
          endForEach

          if (not candidates.refine_matches) return null

          if (candidates.has_match)
            # Convert each generic function arg to a typed function arg and retry this find_method() call.
            local m = candidates.match
            forEach (index of args)
              local arg = args[index]
              if (arg.is_generic_function)
                local fn = (arg as CmdCreateFunction).cloned( null as CloneArgs )
                fn.is_generic = false
                args[index] = fn
                local callback_type = m.parameters[index].type
                if (not callback_type.is_function)
                  throw fn.t.error( "Incompatible function argument; $ expected." (callback_type) )
                endIf

                if (fn.parameters)
                  local param_types = callback_type.callback_parameter_types
                  if (not param_types or param_types.count != fn.parameters.count)
                    throw fn.t.error( "Incorrect number of parameters in generic function definition - expected $, found $."...
                      (select{param_types:param_types.count || 0},fn.parameters.count) )
                  endIf

                  forEach (i of fn.parameters)
                    fn.parameters[i].type = callback_type.callback_parameter_types[i]
                  endForEach
                endIf
                fn.return_type = callback_type.callback_return_type

                if (fn.return_type and fn.statements.count)
                  local last_expression = fn.statements.last
                  if (last_expression not instanceOf CmdReturn)
                    fn.statements[fn.statements.count-1] = CmdReturn( last_expression.t, last_expression )
                  endIf
                endIf
              endIf
            endForEach

            # Restart find_method() with the specialized function
            return find_method( type_context, access, error_on_fail, flags )

          else
            if (candidates.available.count == 0)
              throw first_generic_fn_t.error( "Generic function argument does not match any compatible Function parameters in available methods." )
            else
              throw first_generic_fn_t.error( "Generic function argument ambiguously matches Function parameters in multiple available methods." )
            endIf
          endIf

        endIf

        # Compatible arg check.
        forEach (m in candidates.available)
          contingent
            forEach (index of args)
              local arg_type = args[index].type
              local param_type = m.parameters[index].type
              necessary (arg_type.is_compatible_with(param_type))
            endForEach
          satisfied
            candidates.compatible.add( m )
          endContingent
        endForEach

        if (candidates.compatible.count)
          candidates.update_matches
          if (candidates.has_match) return candidates.match
        endIf

        # Value compatibility check - prefer candidates where either the arg or the param
        # is a Value.
        forEach (m in candidates.available)
          contingent
            forEach (index of args)
              local arg_type = args[index].type
              local param_type = m.parameters[index].type
              necessary (arg_type.instance_of(Program.type_Value) or param_type.instance_of(Program.type_Value))
            endForEach
          satisfied
            candidates.compatible.add( m )
          endContingent
        endForEach

      endIf

      if (candidates.compatible.count)
        candidates.update_matches
        if (candidates.has_match) return candidates.match
      endIf

      # If some candidates have all Function arguments and others have no function arguments,
      # discard candidates with function arguments.  (functions would have been matched already)
      #{
      forEach (m in candidates.available)
        local some_non_fn_params = false

        forEach (param in m.parameters)
          if (not param.type.is_function) some_non_fn_params = true
        endForEach

        if (some_non_fn_params or m.parameters.count == 0)
          candidates.compatible.add( m )
        endIf
      endForEach
      }#

      if (not candidates.refine_matches) return null
      if (candidates.has_match) return candidates.match


      # More specialized arg check (if every parameter of some method m2 has
      # an equivalent or more specialized type than the corresponding arg in
      # m1 then discard m1).
      if (arg_count)
        if (candidates.available.count > 1)
          forEach (m1 in candidates.available)
            contingent
              forEach (m2 in candidates.available)
                if (m1 is not m2)
                  forEach (index of args)
                    local m1_arg_type = m1.parameters[index].type
                    local m2_arg_type = m2.parameters[index].type
                    necessary (m2_arg_type.is_equivalent_or_more_specific_than(m1_arg_type))
                  endForEach
                  sufficient true
                endIf
              endForEach
            unsatisfied
              candidates.compatible.add( m1 )
            endContingent
          endForEach
          if (candidates.compatible.count)
            if (not candidates.update_matches) return null
            if (candidates.has_match) return candidates.match
          endIf
        endIf

      else
        if (candidates.has_match) return candidates.match

      endIf

      # If multiple methods match and named arguments are present, keep only methods
      # that have enough non-default parameters without counting named arguments.
      if (access.named_args)
        forEach (m in candidates.available)
          if (m.accepts_arg_count(arg_count)) candidates.compatible.add( m )
        endForEach
        if (not candidates.refine_matches) return null
        if (candidates.has_match) return candidates.match
      endIf

      # No args -> no params check
      # If two or more candidate functions are available and the caller is
      # sending zero arguments, keep only the zero-parameter candidate
      # and discard the candidates with all optional args.
      if (total_arg_count == 0)
        forEach (m in candidates.available)
          if (m.parameters.count == 0)
            candidates.compatible.add( m )
          endIf
        endForEach

        if (candidates.compatible.count)
          candidates.update_matches
          if (candidates.has_match) return candidates.match
        endIf
      endIf

      if (arg_count == 1)
        # 1. Try candidate(arg) -> candidate(arg->toObject)
        forEach (m in candidates.available)
          local arg_type = args.first.type
          local param_type = m.parameters.first.type
          param_type.organize
          if (param_type is Program.type_Object and arg_type.has_method_named("to_Object"))
            args[0] = args[0].cast_to( Program.type_Object, this )
            return m
          endIf
        endForEach

        # 2. Try candidate(arg) -> candidate(arg->toString)
        forEach (m in candidates.available)
          local arg_type = args.first.type
          local param_type = m.parameters.first.type
          param_type.organize
          if (param_type is Program.type_String and arg_type.has_method_named("to_String"))
            args[0] = args[0].cast_to( Program.type_String, this )
            return m
          endIf
        endForEach

        # 3. Try candidate(arg) -> candidate(arg->to<ParameterType>)
        forEach (m in candidates.available)
          local arg_type = args.first.type
          local param_type = m.parameters.first.type
          param_type.organize
          if (param_type is Program.type_Object and arg_type.has_method_named("to_"+param_type.name))
            args[0] = args[0].cast_to( param_type, this )
            return m
          endIf
        endForEach

        # 4. Try candidate(arg) -> candidate(arg->Value)
        forEach (m in candidates.available)
          local arg_type = args.first.type
          local param_type = m.parameters.first.type
          param_type.organize
          if (param_type is Program.type_String and arg_type.has_method_named("to_Value"))
            args[0] = args[0].cast_to( Program.type_Value, this )
            return m
          endIf
        endForEach

      endIf

      # Choose a [preferred] method if one is available
      local preferred_m : Method
      forEach (m in candidates.available)
        if (m.is_preferred)
          if (preferred_m)
            # More than one preferred method; abort
            preferred_m = null
            escapeForEach
          else
            preferred_m = m
          endIf
        endIf
      endForEach
      if (preferred_m) return preferred_m

      candidates.update_matches  # Force error if required
      return null
endClass

class CandidateMethods
  PROPERTIES
    type_context        : Type
    access              : CmdAccess
    available=Method[]  : Method[]
    compatible=Method[] : Method[]
    error_on_fail       : Logical
    inferring_templates : Logical

  METHODS
    method init( type_context, access, error_on_fail, inferring_templates )

    method has_match->Logical
      return (available.count == 1)

    method match->Method
      if (available.count != 1) return null
      return available[0]

    method refine_matches->Logical
      # If no compatible methods have been added, keeps old set
      return update( false )

    method update_matches->Logical
      # Error if no compatible methods have been added
      return update( true )

    method update( require_compatible:Logical )->Logical
      if (compatible.count == 0)

        if (available.count == 0)
          if (not error_on_fail) return false
          local scope_type = type_context
          while (scope_type.name.begins_with("Function_") and scope_type.base_class)
            # TODO: FIXME if and when .is_function gets set to true on all extended function types
            scope_type = scope_type.base_class
          endWhile
          if (access.name.begins_with("set_"))
            local base_name = access.name.after_first( "set_" )
            throw access.t.error( ''No such variable "$" or method "$" exists in current scope of type $.''...
              (base_name,access.name,scope_type) )
          else
            throw access.t.error( ''No such method or variable "$" exists in current scope of type $$.'' (access.name,scope_type, ...
                                  select{inferring_templates: ", and no existing template method could be instantiated via inference" || ""}) )
          endIf

        elseIf (require_compatible)
          if (not error_on_fail) return false

          local call_sig_buffer = StringBuilder()
          call_sig_buffer.print( type_context.name ).print( "." )
          call_sig_buffer.print( access.name ).print( "(" )
          local printed_arg = false
          if (access.args)
            forEach (arg in access.args)
              if (printed_arg) call_sig_buffer.print(',')
              local arg_type = arg.require_type
              while (arg_type.name.begins_with("Function_") and arg_type.base_class)
                # TODO: FIXME if and when .is_function gets set to true on all extended function types
                arg_type = arg_type.base_class
              endWhile
              call_sig_buffer.print( arg_type.name )
              printed_arg = true
            endForEach
          endIf
          if (access.named_args)
            forEach (arg in access.named_args)
              if (printed_arg) call_sig_buffer.print(',')
              call_sig_buffer.print( '&' ).print( arg.name )
              printed_arg = true
            endForEach
          endIf
          call_sig_buffer.print( ")" )
          local call_sig = call_sig_buffer->String

          local buffer = StringBuilder()
          if (available.count > 1)
            buffer.print( "No exact match for ambiguous call to $" (remove_module_names(call_sig)) )
            if (access.named_args) buffer.print( " - possible incorrect parameter name" )
            buffer.print( ".  Candidates:\n\n" )
          else
            buffer.print( "Call to $ has arguments that are incompatible with the best candidate"...
                (remove_module_names(call_sig)) )
            if (access.named_args) buffer.print( " - possible incorrect parameter name.  Candidate:\n\n" )
            else                   buffer.print( ":\n\n" )
          endIf
          buffer.indent += 2
          forEach (m in available)
            local sig = select{ access.named_args:m.signature_with_named_args || m.signature }
            buffer.println( remove_module_names("$.$" (m.type_context.name,sig)) )
          endForEach
          buffer.indent -= 2
          throw access.t.error( buffer->String )

        endIf

        # We didn't find any compatible methods; just keep our available methods
        # for the next refinement.
        return true
      endIf

      available.clear
      available.add( compatible )
      compatible.clear

      return true

    method remove_module_names( sig:String )->String
      # Module names generally make signatures too cumbersome.  Strip them out for error messages so
      # that e.g. Plasmacore::Box becomes Box, etc.
      local pos = sig.locate( "::" )
      while (pos.exists)
        local i = pos.value
        while (i > 0 and sig[i-1].is_alphanumeric) --i
        sig = sig.leftmost( i ) + sig.from( pos.value + 2 )
        pos = sig.locate( "::" )
      endWhile
      return sig

    method to->String
      return "available:$\ncompatible:$" (available,compatible)
endClass

