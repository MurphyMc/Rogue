class Plugin
  # Override the action methods and/or set the corresponding callback
  PROPERTIES
    name : String  # Name of this plug-in for debugging purposes

    collect_supported_types_callback : Function()
    generate_additonal_types_callback : Function()->Logical

    start_header_file_callback : Function(Object)
    finish_header_file_callback : Function(Object)
    start_code_file_callback : Function(Object)
    finish_code_file_callback : Function(Object)

  METHODS
    method init( name )

    method collect_supported_targets
      # Add strings to RogueC.target_list e.g. "Cython" which will end up being
      # accessible as RogueC.compile_targets["Cython"]->Logical and affects source
      # code bounded by conditional $if "Cython" ... $endIf directives.
      if (collect_supported_types_callback) collect_supported_types_callback()

    method generate_additional_types->Logical
      # Can be called multiple times.  Return "true" to have the compiler re-check types
      # and compile any new types.
      if (generate_additonal_types_callback) return generate_additonal_types_callback()
      return false

    method start_code_file( code_object:Object )
      # Called when a new code file is started so that plugins can potentially
      # manipulate the generated code (e.g., add additional code at the top of
      # the output file).  The meaning of "code_object" is specific to the
      # backend that is in use.
      if (start_code_file_callback) start_code_file_callback( code_object )

    method finish_code_file( code_object:Object )
      if (finish_code_file_callback) finish_code_file_callback( code_object )

    method start_header_file( code_object:Object )
      # Called when a new header file is started -- if the active backend
      # uses header files.  The meaning of "code_object" is specific to the
      # backend that is in use.
      if (start_header_file_callback) start_header_file_callback( code_object )

    method finish_header_file( code_object:Object )
      if (finish_header_file_callback) finish_header_file_callback( code_object )

    method on_collect_supported_types( collect_supported_types_callback )->this
      return this

    method on_generate_additional_types( generate_additonal_types_callback )->this
      return this

    method on_start_header_file( start_header_file_callback )->this
      return this

    method on_finish_header_file( finish_header_file_callback )->this
      return this

    method on_start_code_file( start_code_file_callback )->this
      return this

    method on_finish_code_file( finish_code_file_callback )->this
      return this
endClass
