class Parser
  PROPERTIES
    reader      : TokenReader
    filepath    : String
    this_type   : Type
    this_method : Method

    local_declarations = Local[]  # repeated temporary use
    property_list = Property[]    # temp use

    string_buffer = StringBuilder()

    cur_statement_list : CmdStatementList

    parsing_augment : Logical

    used_modules    = String[]
    module_id_map   : Table<<String,String>>

    inserted_module_prefixes : Logical

  METHODS
    method init( filepath )
      init( Preprocessor(this).process(Tokenizer().tokenize(filepath)), &skip_reprocess )

    method init( filepath, content:String )
      init( Preprocessor(this).process(Tokenizer().tokenize(filepath,content)), &skip_reprocess )

    method init( t:Token, filepath, data:String )
      init( Preprocessor(this).process(Tokenizer().tokenize(t,filepath,data)), &skip_reprocess )

    method init( tokens:Token[], &skip_reprocess )
      if (not skip_reprocess) tokens = Preprocessor( this ).reprocess( tokens )
      reader = TokenReader( tokens )

    method add_used_module( module_name:String )
      if (used_modules.contains(module_name)) return
      used_modules.add( module_name )

      local module_ids = Program.ids_by_module[ module_name ]
      if (module_ids)
        if (not module_id_map) module_id_map = Table<<String,String>>()
        forEach (m_id in module_ids)
          module_id_map[ m_id ] = "$::$" (module_name,m_id)
        endForEach
      endIf

    method consume( type:TokenType )->Logical
      if (not reader.next_is(type)) return false
      reader.read
      return true

    method consume( identifier:String )->Logical
      local t = reader.peek
      if (t.type isNot TokenType.identifier) return false
      if (t->String != identifier) return false
      read
      return true

    method consume_end_commands->Logical
      local found = false
      while (consume(TokenType.eol) or consume(TokenType.symbol_semicolon)) found = true
      return found

    method consume_eols->Logical
      local found_any = false
      while (consume(TokenType.eol)) found_any = true
      return found_any

    method error( message:String )->RogueError
      throw reader.peek.error( message )

    method insert_module_prefixes
      if (inserted_module_prefixes) return
      inserted_module_prefixes = true

      while (reader.has_another)

        local t = reader.read
        if (t.type is TokenType.identifier)
          local name = t->String
          if (name[0] == ':')
            # ::Name -> Name
            reader.tokens[ reader.position - 1 ] = t.type.create_token( t, name.from(2) )
          elseIf (module_id_map)
            local mapping = module_id_map[ name ]
            if (mapping)
              reader.tokens[ reader.position - 1 ] = t.type.create_token( t, mapping )
            endIf
          endIf

        elseIf (t.type is TokenType.directive_module)
          add_used_module( read_identifier )

        elseIf (t.type is TokenType.directive_using)
          add_used_module( read_identifier )

        endIf

      endWhile
      reader.position = 0  # rewind

    method must_consume( type:TokenType, error_message=null:String )
      if (consume(type)) return
      local t = peek
      if (not error_message)
        error_message = "$ expected, found $." (type.quoted_name,t.quoted_name)
      endIf
      throw t.error( error_message )

    method must_consume_eols
      must_consume( TokenType.eol )
      consume_eols

    method must_read( type:TokenType )->Token
      local t = reader.peek
      if (t.type isNot type) must_consume(type)
      return reader.read

    method next_is( type:TokenType )->Logical
      return reader.next_is( type )

    method next_is_end_command->Logical
      if (not reader.has_another) return false
      local type = reader.peek.type
      return (type is TokenType.eol or type is TokenType.symbol_semicolon)

    method next_is_identifier( name=null:String )->Logical
      local t = peek
      if (t.type != TokenType.identifier) return false
      if (not name) return true
      return (t->String == name)

    method next_is_statement->Logical
      if (not reader.has_another) return false
      return reader.next_is_statement_token

    method parse_elements
      insert_module_prefixes  # no effect if called twice

      while (parse_element) noAction

      if (reader.has_another)
        local t = peek
        throw t.error( "Syntax error - unexpected $." (t.quoted_name) )
      endIf

    method parse_element->Logical
      consume_eols
      if (not reader.has_another) return false

      if (parse_native_elements) return true

      local t = peek

      if (t.type is TokenType.keyword_class)
        parse_class_template
        return true

      elseIf (t.type is TokenType.keyword_routine)
        parse_routine
        return true

      elseIf (t.type is TokenType.keyword_augment)
        parse_augment
        return true

      elseIf (t.type is TokenType.directive_module)
        # We've already processed this in insert_module_prefixes(), skip it here
        read
        read_identifier
        must_consume_eols
        return true

      elseIf (t.type is TokenType.directive_using)
        # We've already processed this in insert_module_prefixes(), skip it here
        read
        read_identifier
        must_consume_eols
        return true

        #{
      elseIf (t.type is TokenType.directive_requisite)
        read
        local first = true
        while (first or consume(TokenType.symbol_comma))
          first = false
          consume_eols
          local type = parse_type
          local signature : String
          if (consume(TokenType.symbol_dot))
            if (consume(TokenType.symbol_times))
              signature = "*"
            else
              local buffer = StringBuilder()
              buffer.print( read_identifier )  # method name
              if (consume(TokenType.symbol_open_paren))
                buffer.print( '(' )
                if (not consume(TokenType.symbol_close_paren))
                  local first_param = true
                  while (first_param or consume(TokenType.symbol_comma))
                    if (first_param) first_param = false
                    else             buffer.print( ',' )
                    buffer.print( parse_possible_type )
                  endWhile
                  must_consume( TokenType.symbol_close_paren )
                endIf
                buffer.print( ')' )
              endIf
              signature = buffer->String
            endIf
          endIf
          Program.requisite_list.add( RequisiteItem(t,type,signature) )
          consume_eols
        endWhile
        return true
        }#

      elseIf (next_is_statement)
        this_type = Program.get_type_reference( peek, "Global" )
        this_method = Program.get_launch_method( t )
        parse_multi_line_statements( this_method.statements )
        return true

        #{
      elseIf (next_is(TokenType.keyword_method))
        this_type = Program.get_type_reference( peek, "Global" )
        while (parse_method) noAction
        return true
        }#

      endIf

      return false

    method parse_class_template
      local t = read  # 'class'
      local name = read_identifier
      local template = Template( t, name, Attribute.is_class )
      parse_template_tokens( template, TokenType.keyword_endClass )

      which (template.element_type)
        case Attribute.is_compound
          template.attributes.add( Attribute.is_foreign )
      endWhich

    method parse_routine
      local t = read  # 'routine'
      local name = read_identifier
      local template = Template( t, name, Attribute.is_class | Attribute.is_routine )
      parse_template_tokens( template, TokenType.keyword_endRoutine )

    method parse_template_tokens( template:Template, end_type:TokenType )
      local first_t = peek

      local is_routine = (end_type is TokenType.keyword_endRoutine)

      if (consume(TokenType.symbol_open_specialize))
        local first = true
        while (first or consume(TokenType.symbol_comma))
          first = false
          local t = must_read( TokenType.placeholder_id )
          local param = template.add_type_parameter( t, t->String )
        endWhile
        must_consume( TokenType.symbol_close_specialize )
      endIf

      # Skip past any args and base types to get to the [attributes]
      #   (autoinit) : BaseType, ... [attributes] \n
      #   ^^^^^^^^^^^^^^ leave       ^parse       ^leave
      local starting_pos = reader.position

      if (consume(TokenType.symbol_open_paren))
        # ( name1[=value1][:Type1] [, ...] )
        consume_eols
        if (not consume(TokenType.symbol_close_paren))
          local first = true
          while (first or consume(TokenType.symbol_comma))
            first = false
            consume_eols
            consume( TokenType.symbol_ampersand )
            read_identifier
            consume_eols
            if (consume(TokenType.symbol_equals)) parse_expression
            consume_eols
            if (consume(TokenType.symbol_colon))
              if (not consume(TokenType.placeholder_id)) parse_possible_type
            endIf
            consume_eols
          endWhile
          must_consume( TokenType.symbol_close_paren )
        endIf
      endIf

      if (consume(TokenType.symbol_colon))
        parse_possible_type
        while (consume(TokenType.symbol_comma)) parse_possible_type
      endIf

      local final_pos = reader.position

      if (is_routine)
        # routine MyRoutine<<type>>(args)...
        #   -> class MyRoutine<<type>>
        #        GLOBAL METHODS
        #          method call(args)...

        # Skip the return type if it exists
        if (consume(TokenType.symbol_arrow))
          template.routine_return_type = parse_type
        endIf

        parse_attributes( template.attributes )

        reader.position = starting_pos

        consume_eols
        template.tokens.add( EOLToken(first_t) )
        template.tokens.add( TokenType.keyword_GLOBAL.create_token(first_t) )
        template.tokens.add( TokenType.keyword_METHODS.create_token(first_t) )
        template.tokens.add( EOLToken(first_t) )
        template.tokens.add( TokenType.keyword_method.create_token(first_t) )
        template.tokens.add( TokenType.identifier.create_token(first_t,"call") )
        Program.add_template( template )

      else
        reader.position = starting_pos
        while (reader.position < final_pos) template.tokens.add( read )

        # Parse out attributes
        parse_attributes( template.attributes )
        Program.add_template( template )

        local semi_t = peek
        if (consume(TokenType.symbol_semicolon))
          if (template.tokens.count == 0) template.tokens.add( TokenType.eol.create_token(semi_t) )
          return
        endIf

      endIf

      while (reader.has_another)
        local t = reader.read
        if (t.type is end_type)
          return
        endIf
        template.tokens.add( t )
      endWhile

      trace end_type
      throw reader.error( "$ expected, found end of file." (end_type.quoted_name) )

    method parse_augment
      local t = reader.read  # 'augment'

      local name = parse_possible_type
      if (name.contains('$'))
        local base_name = name.before_first( '<' )
        throw t.error( "Illegal placeholder type in augment.  Write '$' without the specializers (<<...>>) to apply the augment to all template instances or write specific types such as $<<String>> to restrict the augment to that type." (base_name,base_name) )
      endIf

      local aug = Augment( t, name )
      local augments = Program.augment_lookup[ name ]
      if (not augments)
        augments = Augment[]
        Program.augment_lookup[ name ] = augments
      endIf
      augments.add( aug )

      local base_name = name.after_any(':')
      if (base_name.count < name.count)
        augments = Program.augment_lookup[ base_name ]
        if (not augments)
          augments = Augment[]
          Program.augment_lookup[ base_name ] = augments
        endIf
        augments.add( aug )
      endIf

      if (consume(TokenType.symbol_semicolon)) return

      if (consume(TokenType.symbol_colon))
        aug.base_types.add( parse_type )
        consume_eols
        while (consume(TokenType.symbol_comma))
          consume_eols
          aug.base_types.add( parse_type )
          consume_eols
        endWhile
      endIf
      consume_eols

      while (reader.has_another and not next_is(TokenType.keyword_endAugment))
        aug.tokens.add( reader.read )
      endWhile

      must_consume( TokenType.keyword_endAugment )


    method parse_attributes( attributes:Attributes )
      if (not consume(TokenType.symbol_open_bracket)) return

      while (reader.has_another and not next_is(TokenType.symbol_close_bracket))
        local t = peek
        if (consume(TokenType.keyword_macro))
          attributes.add( Attribute.is_macro )
        elseIf (consume(TokenType.keyword_native))
          attributes.add( Attribute.is_native )

        elseIf (consume("abstract"))
          attributes.add( Attribute.is_abstract )
        elseIf (consume("aspect"))
          ensure_unspecialized_element_type( t, attributes )
          attributes.add( Attribute.is_aspect )
        elseIf (consume("compound"))
          ensure_unspecialized_element_type( t, attributes )
          attributes.add( Attribute.is_compound )
        elseIf (consume("fallback"))
          attributes.add( Attribute.is_fallback )
        elseIf (consume("foreign"))
          attributes.add( Attribute.is_foreign | Attribute.is_native )
        elseIf (consume("immutable"))
          attributes.add( Attribute.is_immutable )
        elseIf (consume("primitive"))
          ensure_unspecialized_element_type( t, attributes )
          attributes.add( Attribute.is_primitive )
        elseIf (consume("requisite"))
          attributes.add( Attribute.is_requisite )
        elseIf (consume("singleton"))
          attributes.add( Attribute.is_singleton )
        elseIf (consume("special"))
          attributes.add( Attribute.is_special )
        elseIf (consume("task"))
          attributes.add( Attribute.is_task )
        elseIf (consume("api"))
          attributes.add( Attribute.is_api )
        elseIf (next_is(TokenType.identifier))
          attributes.add( read->String )
        else
          throw peek.error( "Invalid attribute: " + peek )
        endIf
      endWhile

      must_consume( TokenType.symbol_close_bracket )

    method ensure_unspecialized_element_type( t:Token, attributes:Attributes )
      if ((attributes.flags & Attribute.type_mask))
        throw t.error( "A class cannot be both '$' and '$'." (t->String,attributes.element_type_name) )
      endIf

    method parse_type_def( this_type )
      local t = peek

      if (consume(TokenType.symbol_open_paren))
        # ( auto_property[=value][:Type, ... )
        consume_eols
        if (not consume(TokenType.symbol_close_paren))
          local m : Method
          if (this_type.is_compound)
            m = this_type.add_global_method( t, "create" )
            m.attributes.add( Attribute.is_generated )
          else
            m = this_type.add_method( t, "init" )
          endIf
          m.return_type = this_type
          local first = true
          while (first or consume(TokenType.symbol_comma))
            first = false
            consume_eols

            # [&]name[=default_value][:Type]
            t = peek
            local is_flag = consume( TokenType.symbol_ampersand )
            local p_name = read_identifier
            local param = m.add_parameter( t, p_name )
            consume_eols
            if (consume(TokenType.symbol_equals)) param.initial_value = parse_expression
            consume_eols

            local p_type : Type
            if (consume(TokenType.symbol_colon))
              consume_eols
              p_type = parse_type

              if (this_type.is_compound)
                param.type = p_type
              endIf

              this_type.add_property( t, p_name, p_type )

            elseIf (is_flag)
              p_type = Program.type_Logical
              if (this_type.is_compound) param.type = p_type
              this_type.add_property( t, p_name, p_type )
            endIf

            if (is_flag and not param.initial_value)
              if (p_type is Program.type_Logical)
                param.initial_value = CmdLiteralLogical( t, false )
              else
                param.initial_value = CmdLiteralInt32( t, 0 )
              endIf
            endIf

            consume_eols
          endWhile
          must_consume( TokenType.symbol_close_paren )
        endIf
      endIf

      if (consume(TokenType.symbol_colon))
        # : BaseType1, BaseType2, ...
        local first = true
        while (first or consume(TokenType.symbol_comma))
          first = false
          consume_eols
          this_type.base_types.add( parse_type )
          consume_eols
        endWhile
      endIf

      while (parse_section) noAction
      if (reader.has_another)
        throw peek.error( "Syntax error - unexpected $." (peek.quoted_name) )
      endIf

    method parse_section->Logical
      consume_eols

      if (parse_native_elements) return true

      if (consume(TokenType.begin_augment_tokens))
        parsing_augment = true
        consume_eols
      endIf

      if (consume(TokenType.keyword_ENUMERATE))
        while (parse_definitions(true)) noAction
        return true
      endIf

      if (consume(TokenType.keyword_DEFINITIONS))
        while (parse_definitions(false)) noAction
        return true
      endIf

      if (consume(TokenType.keyword_GLOBAL))
        if (consume(TokenType.keyword_PROPERTIES))
          while (parse_properties(true)) noAction
          return true
        elseIf (consume(TokenType.keyword_METHODS))
          while (parse_method(true)) noAction
          return true
        endIf
      endIf

      if (consume(TokenType.keyword_PROPERTIES))
        while (parse_properties) noAction
        return true
      endIf

      if (consume(TokenType.keyword_METHODS))
        while (parse_method) noAction
        return true
      endIf


      return false

    method parse_definitions( enumerate:Logical )->Logical
      consume_eols
      if (not next_is(TokenType.identifier)) return false

      local t = peek
      local name  = read_identifier
      local value : Cmd

      if (consume(TokenType.symbol_equals))
        consume_eols
        value = parse_expression
      elseIf (not consume_eols)
        value = parse_expression
      endIf

      if (not enumerate and not value)
        throw peek.error( "Definition expected." )
      endIf

      if (value)
        if (value instanceOf CmdLiteralInt32)
          this_type.prev_enum_cmd = null
          this_type.next_enum_offset = (value as CmdLiteralInt32).value + 1
        else
          this_type.prev_enum_cmd = value
          this_type.next_enum_offset = 1
        endIf
      else
        if (this_type.prev_enum_cmd)
          value = CmdAdd( t, this_type.prev_enum_cmd.clone, CmdLiteralInt32(t,this_type.next_enum_offset) )
        else
          value = CmdLiteralInt32( t, this_type.next_enum_offset )
        endIf
        ++this_type.next_enum_offset
      endIf

      local def = Definition( t, name, value, enumerate )
      this_type.definition_lookup[ name ] = def
      this_type.definition_list.add( def )

      return true

    method parse_properties( as_global=false:Logical )->Logical
      consume_eols

      if (consume(TokenType.keyword_native))
        # Example: native "FILE* fp;"
        if (not next_is(TokenType.literal_string))
          throw peek.error( "Literal string expected." )
        endIf
        if (not this_type.native_properties) this_type.native_properties = NativeProperty[]
        local native_t = read
        this_type.native_properties.add( NativeProperty( native_t, native_t->String ) )
        must_consume_eols
        return true
      endIf

      if (not next_is(TokenType.identifier)) return false

      property_list.clear
      # Stores current property declarations so that we can come back and
      # and assign a type to them.

      local first = true
      while (first or consume(TokenType.symbol_comma))
        first = false
        consume_eols
        local t = peek
        local name = read_identifier
        local p : Property
        if (as_global) p = this_type.add_global( t, name )
        else           p = this_type.add_property( t, name )
        property_list.add( p )
        if (consume(TokenType.symbol_equals))
          p.initial_value = parse_expression
        endIf
      endWhile

      consume_eols
      if (consume(TokenType.symbol_colon))
        local p_type = parse_type
        forEach (p in property_list)
          p.type = p_type
        endForEach
      else
        forEach (p in property_list)
          local name = "property"
          if (as_global) name = "global property"
          if (p.initial_value)
            p.type = p.initial_value.implicit_type( Scope(this_type,null) )
            if (p.type is null)
              println p.initial_value.type_name
              throw p.initial_value.t.error(
                ''Cannot determine $ type from initial value; append an explicit type declaration such as ": Object" '' (name) )
            endIf
          else
            throw p.t.error( ''An initial value or $ type (for example, ": Object") must be specified.'' (name) )
          endIf
        endForEach
      endIf

      return true

    method parse_method( as_routine=false:Logical )->Logical
      consume_eols

      if (not next_is(TokenType.keyword_method)) return false

      local t = read  # 'routine' or 'method'
      local name = read_identifier
      local return_type : Type
      which (name)
        case "operator"
          name += reader.read->String
        case "to"
          must_consume( TokenType.symbol_arrow )
          return_type = parse_type
          name = "to_" + return_type.name
      endWhich

      this_method = Method( t, this_type, name )
      this_method.return_type = return_type

      # Parse parameters
      if (consume(TokenType.symbol_open_paren))
        if (not consume(TokenType.symbol_close_paren))
          local first = true
          while (first or consume(TokenType.symbol_comma))
            first = false
            consume_eols

            local is_flag = consume( TokenType.symbol_ampersand )

            # identifier
            t = peek
            local param = this_method.add_parameter( t, read_identifier(true) )

            if (consume(TokenType.symbol_equals))
              # = default_value
              param.initial_value = parse_expression
            endIf

            if (consume(TokenType.symbol_colon))
              # : Type
              param.type = parse_type
            endIf

            if (is_flag)
              if (not param.type) param.type = Program.type_Logical
              if (not param.initial_value) param.initial_value = param.type.create_default_value( param.t )
            endIf
          endWhile
          must_consume( TokenType.symbol_close_paren )
        endIf
      endIf

      # Optional ->ReturnType
      if (not return_type)
        if (consume(TokenType.symbol_arrow))
          if (consume(TokenType.keyword_this))
            this_method.return_type = this_type
          else
            this_method.return_type = parse_type
          endIf
        endIf
      endIf

      parse_attributes( this_method.attributes )
      if (parsing_augment) this_method.attributes.add( Attribute.is_augment )

      contingent
        necessary (this_method.is_special)
        necessary (this_type.name == "Boxed<<String>>")
      unsatisfied
        if (as_routine) this_type.add_global_method( this_method )
        else            this_type.add_method( this_method )
      endContingent

      consume( TokenType.symbol_colon )

      consume_eols

      if (this_method.is_macro)
        if (consume(TokenType.keyword_native))
          this_method.attributes.add( Attribute.is_native )
        endIf

        if (this_method.is_native)
          # macro native [(] "$this.fn($arg)" [)]

          local has_parens = consume( TokenType.symbol_open_paren )
          consume_eols

          if (not next_is(TokenType.literal_string))
            throw peek.error( "Literal string expected." )
          endIf

          this_method.native_code = read->String

          if (has_parens)
            consume_eols
            must_consume( TokenType.symbol_close_paren )
          endIf

          if (next_is(TokenType.symbol_arrow))
            consume( TokenType.symbol_arrow )
            local type = parse_type
            throw peek.error( ''Native expression types cannot be specified in macro methods - remove the "->$".'' (type) )
          endIf

        else
          # macro this.fn(arg)
          # macro ...
          parse_single_line_statements( this_method.statements )
        endIf

      else
        if (parsing_augment)
          parse_augment_statements
        else
          this_method.statements.add( this_method.begin_label(peek,"insert",false) )
          parse_multi_line_statements( this_method.statements )
          this_method.statements.add( this_method.begin_label(peek,"append",false) )
        endIf
      endIf
      return true

    method parse_single_or_multi_line_statements( statements:CmdStatementList, end_type:TokenType )
      if (consume_eols)
        # multi-line while
        parse_multi_line_statements( statements )
        must_consume( end_type )
      else
        # single-line while
        parse_single_line_statements( statements )
        consume_eols
      endIf

    method parse_multi_line_statements( statements:CmdStatementList )
      local prev_statement_list = cur_statement_list
      cur_statement_list = statements

      consume_end_commands
      while (next_is_statement)
        parse_statement( statements, true )

        while (consume(TokenType.eol) or consume(TokenType.symbol_semicolon)) noAction
        consume_end_commands
      endWhile

      cur_statement_list = prev_statement_list

    method parse_augment_statements
      local prev_statement_list = cur_statement_list

      this_method.begin_label( peek, "insert", true )
      this_method.begin_label( peek, "append", true )

      local cur_label = this_method.begin_label( peek, "insert", true )
      cur_statement_list = cur_label.statements

      consume_end_commands
      while (next_is_statement)

        local t = peek

        if (consume(TokenType.symbol_open_specialize))
          cur_label = this_method.begin_label( t, read_identifier, true )
          cur_statement_list = cur_label.statements
          must_consume( TokenType.symbol_close_specialize )
          consume_end_commands
          nextIteration
        endIf

        parse_statement( cur_label.statements, true )

        while (consume(TokenType.eol) or consume(TokenType.symbol_semicolon)) noAction
        consume_end_commands
      endWhile

      cur_statement_list = prev_statement_list

    method parse_single_line_statements( statements:CmdStatementList )
      local prev_statement_list = cur_statement_list
      cur_statement_list = statements

      while (next_is_statement)
        parse_statement( statements, false )
        if (not consume(TokenType.symbol_semicolon))
          cur_statement_list = prev_statement_list
          return
        endIf
        while (consume(TokenType.symbol_semicolon)) noAction

        # Don't let a trailing ';' act as a next-line continuation.
        if (next_is_end_command) escapeWhile
      endWhile

      if (not consume(TokenType.eol))
        if (not peek.is_structure)
          must_consume( TokenType.eol )  # force an error
        endIf
      endIf

      cur_statement_list = prev_statement_list


    method parse_statement( statements:CmdStatementList, allow_control_structures:Logical )
      local t = peek

      if (consume(TokenType.keyword_nativeHeader))
        # Turn this nativeHeader into a Cmd node instead of storing the native header
        # directly so that the header is only added if the method is resolved (meaning
        # it's actually used in the program).  This is a way to have classes with native
        # dependencies that don't get pulled in if they're unused.
        statements.add( CmdNativeHeader(t,t->String) )
        return
      endIf

      if (consume(TokenType.keyword_nativeCode))
        # Turn this nativeHeader into a Cmd node instead of storing the native header
        # directly so that the header is only added if the method is resolved (meaning
        # it's actually used in the program).  This is a way to have classes with native
        # dependencies that don't get pulled in if they're unused.
        statements.add( CmdNativeCode(t,t->String) )
        return
      endIf

      if (consume(TokenType.directive_requisite))
        # Turn this $requisite directive into a Cmd node so that it only takes effect
        # if the method is actually used in the program.
        statements.add( CmdMakeRequisite(t,t->String) )
        return
      endIf

      if (allow_control_structures)
        if (next_is(TokenType.keyword_if))
          statements.add( parse_if )
          return

        elseIf (next_is(TokenType.keyword_which))
          statements.add( parse_which )
          return

        #{
        elseIf (next_is(TokenType.keyword_whichIs))
          statements.add( parse_which( true ) )
          return
          }#

        elseIf (next_is(TokenType.keyword_forEach))
          statements.add( parse_for_each )
          return

        elseIf (next_is(TokenType.keyword_block))
          statements.add( parse_block )
          return

        elseIf (next_is(TokenType.keyword_contingent))
          statements.add( parse_contingent )
          return

        elseIf (next_is(TokenType.keyword_while))
          statements.add( parse_while )
          return

        elseIf (next_is(TokenType.keyword_loop))
          statements.add( parse_loop )
          return

        elseIf (next_is(TokenType.keyword_try))
          statements.add( parse_try )
          return

        endIf
        #{
      else
        local err = false
        if (next_is(TokenType.keyword_if)) err = true
        if (err) throw t.error( "Control structures must begin on a separate line." )
      }#
      endIf

      if (next_is(TokenType.keyword_local))
        parse_local_or_global( statements )
        return

      elseIf (next_is(TokenType.keyword_global))
        parse_local_or_global( null )
        return

      elseIf (consume(TokenType.keyword_return))
        if (this_method.is_macro and this_method.return_type?)
          throw t.error( "Omit the 'return' in a macro method with a return type." )
        endIf

        if (next_is_end_command)
          statements.add( CmdReturn(t) )
        else
          #if (not this_method.return_type)
          #throw peek.error( "$()() is not declared as returning a value." (this_method.name) )
          #endIf
          statements.add( CmdReturn(t,parse_expression) )
        endIf
        return

      elseIf (consume(TokenType.keyword_await))
        # Insert a local result declaration and a statement list to hold the
        # await cmd and subsequent conversion.  Substitute the result var in
        # place of this statement.
        #
        #   await some_task(a,b)
        #
        # ->
        #
        #   {
        #     task = some_task(a,b)
        #     while (task.update) yield
        #   }
        #
        local statement_list = CmdStatementList()
        statements.add( CmdAwait(t,parse_expression,statement_list) )
        return

      elseIf (consume(TokenType.keyword_yield))
        statements.add( CmdYield(t) )
        return

      elseIf (consume(TokenType.keyword_throw))
        statements.add( CmdThrow(t,parse_expression) )
        return

      elseIf (consume(TokenType.keyword_noAction))
        noAction
        return

      elseIf (consume(TokenType.keyword_trace) or consume(TokenType.keyword_trace_position))
        local include_position = (t.type is TokenType.keyword_trace_position)

        local buffer = StringBuilder()
        buffer.print('[').print( this_type.name )
        if (this_method) buffer.print( "." ).print( this_method.name ).print( "() " )
        buffer.print( File(t.filepath).filename )
        buffer.print( ':' ).print( t.line ).print( ']' )

        local data_pos = buffer.count + 2
        local args = CmdArgs()
        local needs_space = false
        local first = true
        while (reader.has_another and not next_is_end_command and (first or consume(TokenType.symbol_comma)))
          if (first)
            if (include_position)
              buffer.print( "  " )
            else
              buffer.clear
            endIf
          endIf
          first = false
          local start_t = peek
          local expr = parse_expression
          if (expr instanceOf CmdLiteralString)
            buffer.print( (expr as CmdLiteralString).value )
            needs_space = false
          else
            if (needs_space) buffer.print(' ')
            local end_t = peek

            local parse_reader = RogueC.parsereaders_by_filepath[ start_t.filepath ]
            if (parse_reader and start_t.line and start_t.column and start_t.filepath == end_t.filepath)
              parse_reader.seek_location( start_t.line, start_t.column )
              while (parse_reader.has_another and (parse_reader.line < end_t.line or ...
                     (parse_reader.line == end_t.line and parse_reader.column < end_t.column)))
                buffer.print( parse_reader.read )
              endWhile
              buffer.print( ":$" )
              args.add( expr )
              needs_space = true
            endIf
          endIf
        endWhile

        if (include_position and args.count)
          buffer.insert_spaces( data_pos, ((data_pos+3)&!3)-data_pos, ' ' )
        endIf

        if (reader.has_another and not next_is_end_command)
          throw peek.error( "A comma-separated list of values is expected." )
        endIf

        statements.add( CmdTrace( t, CmdFormattedString(t,buffer->String,args) ) )
        return

        #{
        local cmd_trace = CmdTrace(t,this_method)
        while (reader.has_another)
          if (next_is(TokenType.symbol_semicolon) or next_is(TokenType.eol) or next_is(TokenType.symbol_close_brace))
            escapeWhile
          endIf

          local pos1 = reader.position
          t = peek
          if (consume(TokenType.symbol_comma))
            cmd_trace.labels.add(", ")
            cmd_trace.expressions.add( CmdLiteralString(t,", ") )
          else
            cmd_trace.expressions.add( parse_expression )
            cmd_trace.labels.add( reader.source_string(pos1,reader.position-1) )
          endIf

        endWhile
        statements.add( cmd_trace )
        return
        }#

        #{
      elseIf (consume(TokenType.keyword_tron))
        statements.add( CmdTron(t) )
        return

      elseIf (consume(TokenType.keyword_troff))
        statements.add( CmdTroff(t) )
        return
      }#

      endIf

      if (consume(TokenType.symbol_open_specialize))
        if (parsing_augment)
          throw t.error( "Augment section labels should be defined in the outer scope of the method and cannot be nested inside a control structure." )
        else
          statements.add( this_method.begin_label(t,read_identifier,false) )
        endIf
        must_consume( TokenType.symbol_close_specialize )
        return
      endIf

      if (consume(TokenType.keyword_escapeWhile))
        statements.add( CmdEscape(t,CmdControlStructure.type_while) )
        return

      elseIf (consume(TokenType.keyword_escapeForEach))
        statements.add( CmdEscape(t,CmdControlStructure.type_forEach) )
        return

      elseIf (consume(TokenType.keyword_escapeBlock))
        statements.add( CmdEscape(t,CmdControlStructure.type_block) )
        return

      elseIf (consume(TokenType.keyword_escapeContingent))
        statements.add( CmdEscape(t,CmdControlStructure.type_contingent) )
        return

      elseIf (consume(TokenType.keyword_escapeLoop))
        statements.add( CmdEscape(t,CmdControlStructure.type_loop) )
        return

      elseIf (consume(TokenType.keyword_escapeIf))
        statements.add( CmdEscape(t,CmdControlStructure.type_if) )
        return

      elseIf (consume(TokenType.keyword_escapeTry))
        statements.add( CmdEscape(t,CmdControlStructure.type_try) )
        return

      elseIf (consume(TokenType.keyword_escapeWhich))
        statements.add( CmdEscape(t,CmdControlStructure.type_which) )
        return
      endIf

      if (consume(TokenType.keyword_nextIteration))
        statements.add( CmdNextIteration(t) )
        return
      endIf

      if (consume(TokenType.keyword_necessary))
        statements.add( CmdNecessary(t, parse_expression))
        return
      endIf

      if (consume(TokenType.keyword_sufficient))
        statements.add( CmdSufficient(t, parse_expression))
        return
      endIf

      if (consume(TokenType.symbol_plus_plus))
        statements.add( CmdAdjust(t, parse_expression,1) )
        return
      endIf

      if (consume(TokenType.symbol_minus_minus))
        statements.add( CmdAdjust(t, parse_expression,-1) )
        return
      endIf

      local expression = parse_expression

      t = peek
      if (consume(TokenType.symbol_equals))
        statements.add( CmdAssign(t,expression,parse_expression) )
        return
      endIf

      if (t.type.is_op_with_assign)
        read
        statements.add( CmdModifyAndAssign( t, expression, t.type, parse_expression ) )
        return
      endIf

      #{
      if (consume(TokenType.symbol_access_assign))
        local rhs = parse_expression
        local access = rhs as CmdAccess
        if (access is null) throw rhs.error( "Property access or method call expected." )
        while (access.operand)
          local operand = access.operand as CmdAccess
          if (operand is null) throw access.operand.t.error( "Property access or method call expected." )
          access = operand
        endWhile
        access.operand = expression.clone
        statements.add( CmdAssign(t,expression,access) )
      endIf
      }#

      if (consume(TokenType.symbol_plus_plus))
        statements.add( CmdAdjust(t, expression,1) )
        return
      endIf

      if (consume(TokenType.symbol_minus_minus))
        statements.add( CmdAdjust(t, expression,-1) )
        return
      endIf

      local t_type = t.type
      if (t_type.is_op_with_assign)
        read
        local target = expression
        local new_value = parse_expression
        statements.add( CmdModifyAndAssign( t, target, t_type, new_value) )
        return
      endIf

      # No-parens args can follow an initial expression
      if (not next_is_end_command)
        local access = expression as CmdAccess
        if (access and access.args is null)
          local args = CmdArgs()
          while (not next_is_end_command and not peek.is_structure)
            args.add( parse_expression )
          endWhile
          access.args = args
        endIf
      endIf

      statements.add( expression )

    method parse_which->CmdWhich
      local t = read  # 'which'
      local cmd_which = CmdWhich( t, parse_expression )
      must_consume_eols
      while (next_is(TokenType.keyword_case))
        t = read  # 'case'
        consume_eols
        local cmd_case = cmd_which.add_case( t )
        local first = true
        while (first or consume(TokenType.symbol_comma))
          first = false
          cmd_case.conditions.add( parse_expression )
          consume_eols
        endWhile
        if (consume(TokenType.symbol_colon)) consume_eols
        parse_multi_line_statements( cmd_case.statements )
      endWhile

      if (next_is(TokenType.keyword_others))
        t = read  # 'others'
        consume_eols
        local cmd_case = cmd_which.add_case_others( t )
        if (consume(TokenType.symbol_colon)) consume_eols
        parse_multi_line_statements( cmd_case.statements )
      endIf

      must_consume( TokenType.keyword_endWhich )
      return cmd_which

    method parse_native_elements->Logical
      local t = peek

      if (consume(TokenType.keyword_nativeHeader))
        local code = t->String
        if (not Program.native_header.contains(code))
          Program.native_header.add( code )
        endIf
        return true

      elseIf (consume(TokenType.keyword_nativeCode))
        local code = t->String
        if (not Program.native_header.contains(code))
          Program.native_code.add( code )
        endIf
        return true

      elseIf (consume(TokenType.directive_requisite))
        local pattern = t->String
        Program.get_launch_method( t ).statements.add( CmdMakeRequisite(t,pattern) )
        return true

      else
        return false
      endIf

    method parse_contingent->CmdContingent
      local t = read  # 'contingent'
      local cmd_contingent = CmdContingent( t )
      parse_multi_line_statements( cmd_contingent.statements )

      if (consume(TokenType.keyword_satisfied))
        cmd_contingent.satisfied_statements = CmdStatementList()
        parse_multi_line_statements( cmd_contingent.satisfied_statements )
      endIf

      if (consume(TokenType.keyword_unsatisfied))
        cmd_contingent.unsatisfied_statements = CmdStatementList()
        parse_multi_line_statements( cmd_contingent.unsatisfied_statements )
      endIf

      must_consume( TokenType.keyword_endContingent )
      return cmd_contingent

    method parse_try->CmdTry
      local t = read  # 'try'
      local cmd_try = CmdTry( t )
      parse_multi_line_statements( cmd_try.statements )
      while (next_is(TokenType.keyword_catch))
        local cmd_catch = cmd_try.add_catch( read )
        consume_eols
        must_consume( TokenType.symbol_open_paren )
        local error_t = peek
        local error_name = read_identifier
        consume_eols
        must_consume( TokenType.symbol_colon )
        consume_eols
        cmd_catch.error_var = this_method.add_local( error_t, error_name, parse_type )
        consume_eols
        must_consume( TokenType.symbol_close_paren )
        parse_multi_line_statements( cmd_catch.statements )
      endWhile
      must_consume( TokenType.keyword_endTry )

      return cmd_try

    method parse_local_or_global( statements:CmdStatementList )
      local_declarations.clear
      local t = read   # "local" or "global"

      # local[=initial_value] [, ...]
      local first = true
      while (first or consume(TokenType.symbol_comma))
        first = false
        t = peek
        local name = read_identifier
        local v = this_method.add_local( t, name )
        local_declarations.add( v )
        if (consume(TokenType.symbol_equals)) v.initial_value = parse_expression
      endWhile

      # [: Type]
      if (consume(TokenType.symbol_colon))
        local type = parse_type
        forEach (v in local_declarations) v.type = type
      else
        forEach (v in local_declarations)
          if (v.type is null and v.initial_value)
            v.type = v.initial_value.implicit_type( Scope(this_type,null) )
          endIf
        endForEach
      endIf

      # Turn each declaration into a separate CmdLocalDeclaration
      if (statements)
        # locals
        forEach (v in local_declarations)
          statements.add( CmdLocalDeclaration(v.t,v) )
        endForEach
      else
        # global properties
        forEach (v in local_declarations)
          Program.global_properties.add( Property(v.t,Program.type_Global,v.name,v.type,v.initial_value) )
        endForEach
      endIf

    method parse_type->Type
      local name : String

      local t = peek
      if (t->Type)
        local type = read->Type
        if (next_is(TokenType.symbol_empty_brackets) or next_is(TokenType.symbol_question_mark))
          name = type.name
          loop
            if (consume(TokenType.symbol_empty_brackets))
              name += "[]"
            elseIf (consume(TokenType.symbol_question_mark))
              name += "?"
            else
              escapeLoop
            endIf
          endLoop
        else
          return type
        endIf

      else
        name = parse_possible_type

      endIf

      local type = Program.get_type_reference( t, name )
      return type

    method parse_possible_type( allow_at_sign=false:Logical )->String
      local t = peek
      local name = read_identifier( allow_at_sign )

      if (next_is(TokenType.symbol_open_specialize))
        name += parse_specialization_string

        # FIXME
        #{
        local ss = parse_specialization_string
        if (not name.contains("____")) name += "____" + ss.count
        name += "<<"
        local first = true
        forEach (sx in ss)
          if (first? == false) name +=','
          first = false
          name += sx
        endForEach
        name += ">>"
        }#
      elseIf (name == "Function")
        local parameter_types : Type[]
        local return_type : Type
        if (consume(TokenType.symbol_open_paren))
          if (not consume(TokenType.symbol_close_paren))
            parameter_types = Type[]
            local first = true
            while (first or consume(TokenType.symbol_comma))
              first = false
              local type_t = peek
              local type_name = parse_possible_type
              if (consume(TokenType.symbol_colon))
                # Discard the name of the callback parameter
                parameter_types.add( parse_type )
              else
                parameter_types.add( Program.get_type_reference(type_t,type_name) )
              endIf
            endWhile
            must_consume( TokenType.symbol_close_paren )
          endIf
        endIf

        if (consume(TokenType.symbol_arrow))
          local has_parens = consume( TokenType.symbol_open_paren )
          return_type = parse_type
          if (has_parens) must_consume( TokenType.symbol_close_paren )
        endIf

        name = Program.get_callback_type_reference( t, parameter_types, return_type ).name
      endIf

      loop
        if (consume(TokenType.symbol_empty_brackets))
          name += "[]"
        elseIf (consume(TokenType.symbol_question_mark))
          name += "?"
        else
          escapeLoop
        endIf
      endLoop

      return name

    method parse_if->CmdIf
      local t = read
      local cmd_if = CmdIf( t )
      cmd_if.condition = parse_expression

      if (consume_eols)
        # multi-line if
        parse_multi_line_statements( cmd_if.statements )

        t = peek
        local cur_if = cmd_if
        while (next_is(TokenType.keyword_elseIf))
          # Need logic to avoid dangling elseIf problems.
          local starting_position = reader.position
          read  # 'elseIf'

          local elseIf_condition = parse_expression

          if (consume(TokenType.eol))
            # This elseIf IS part of the current multiline 'if'
            local cmd_else_if = CmdIf( t, elseIf_condition, CmdControlStructure.type_else_if  )
            parse_multi_line_statements( cmd_else_if.statements )
            cur_if.else_statements = CmdStatementList()
            cur_if.else_statements.add( cmd_else_if )
            cur_if = cmd_else_if
          else
            # This elseIf actually belongs to something else; undo and abort
            reader.position = starting_position
            escapeWhile
          endIf
          t = peek
        endWhile

        if (next_is(TokenType.keyword_else) and reader.peek(1).type is TokenType.eol)
          read
          cur_if.else_statements = CmdStatementList()
          parse_multi_line_statements( cur_if.else_statements )
        endIf

        must_consume( TokenType.keyword_endIf )

      else
        # single-line if
        parse_single_line_statements( cmd_if.statements )
        consume_eols

        t = peek
        local cur_if = cmd_if
        while (next_is(TokenType.keyword_elseIf))
          # Need logic to avoid dangling elseIf problems.
          local starting_position = reader.position
          read  # 'elseIf'

          local elseIf_condition = parse_expression

          if (next_is(TokenType.eol))
            # This elseIf belongs to another if statement - undo and abort
            reader.position = starting_position
            escapeWhile
          else
            local cmd_else_if = CmdIf( t, elseIf_condition, CmdControlStructure.type_else_if )
            parse_single_line_statements( cmd_else_if.statements )
            cur_if.else_statements = CmdStatementList()
            cur_if.else_statements.add( cmd_else_if )
            cur_if = cmd_else_if
            must_consume_eols
          endIf
          t = peek
        endWhile

        if (next_is(TokenType.keyword_else) and reader.peek(1).type isNot TokenType.eol)
          read
          cur_if.else_statements = CmdStatementList()
          parse_single_line_statements( cur_if.else_statements )
        endIf
      endIf

      return cmd_if

    method parse_loop->CmdGenericLoop
      local t = read  # 'loop'
      local cmd_loop = CmdGenericLoop( t, CmdControlStructure.type_loop, null )

      if (not consume_eols)
        # loop N
        #   ...
        # endLoop
        local control_var = this_method.add_local( t, Program.create_unique_id )
        control_var.initial_value = CmdLiteralInt32( t, 1 )

        local last_var = this_method.add_local( t, Program.create_unique_id )
        last_var.initial_value = parse_expression
        must_consume_eols

        local step_cmd = CmdAdjustLocal( t, control_var, 1 )

        cmd_loop.condition = CmdCompareLE(t,CmdReadLocal(t,control_var),CmdReadLocal(t,last_var))

        cmd_loop.add_control_var( control_var )
        cmd_loop.add_control_var( last_var )
        cmd_loop.add_upkeep( step_cmd )
      endIf

      parse_multi_line_statements( cmd_loop.statements )
      must_consume( TokenType.keyword_endLoop )

      return cmd_loop

    method parse_block->CmdBlock
      local t = read
      local cmd_block = CmdBlock( t )

      must_consume_eols
      parse_multi_line_statements( cmd_block.statements )
      must_consume( TokenType.keyword_endBlock )

      return cmd_block

    method parse_while->CmdGenericLoop
      local t = read
      local cmd_while = CmdGenericLoop( t, CmdControlStructure.type_while, parse_expression )

      if (consume_eols)
        # multi-line while
        parse_multi_line_statements( cmd_while.statements )
        must_consume( TokenType.keyword_endWhile )
      else
        # single-line while
        parse_single_line_statements( cmd_while.statements )
        consume_eols
      endIf

      return cmd_while

    method parse_for_each->Cmd
      local t = read  # 'forEach'

      local has_parens = consume( TokenType.symbol_open_paren )

      local expr = parse_expression
      local access = expr as CmdAccess
      if (access)
        if (access.context or access.args)
          throw access.t.error( "Single identifier expected for control variable name." )
        else
          local index_var_name : String
          if (access.name == "at")
            # forEach (at index in list) - variant of forEach (value at index in list)
            throw access.t.error( "Missing element name before 'at'." )
          elseIf (consume("at"))
            index_var_name = read_identifier
          endIf

          if (consume(TokenType.keyword_in))
            local collection = parse_expression
            local range = collection as CmdRange
            if (range)
              if (index_var_name ) throw range.t.error( "Cannot use 'at' with a range." )

              local control_var = this_method.add_local( t, access.name )
              control_var.initial_value = range.first

              local last_var = this_method.add_local( t, Program.create_unique_id )
              last_var.initial_value = range.last

              local step_cmd = null : Cmd
              if (consume(TokenType.keyword_step))
                local step_value = parse_expression
                step_cmd = CmdModifyAndAssignLocal( range.t, control_var, TokenType.symbol_plus_equals, step_value )
              else
                if (range instanceOf CmdRangeUpTo or range instanceOf CmdRangeUpToLessThan)
                  step_cmd = CmdAdjustLocal( range.t, control_var, 1 )
                else
                  step_cmd = CmdAdjustLocal( range.t, control_var, -1 )
                endIf
              endIf

              local compare_cmd : Cmd
              if (range instanceOf CmdRangeUpTo)
                compare_cmd = CmdCompareLE( t, CmdReadLocal(t,control_var), CmdReadLocal(t,last_var) )
              elseIf (range instanceOf CmdRangeUpToLessThan)
                compare_cmd = CmdCompareLT( t, CmdReadLocal(t,control_var), CmdReadLocal(t,last_var) )
              else
                compare_cmd = CmdCompareGE( t, CmdReadLocal(t,control_var), CmdReadLocal(t,last_var) )
              endIf

              local cmd_for_each = CmdGenericLoop( t, CmdControlStructure.type_forEach, compare_cmd )

              cmd_for_each.add_control_var( control_var )
              cmd_for_each.add_control_var( last_var )
              cmd_for_each.add_upkeep( step_cmd )

              if (has_parens) must_consume( TokenType.symbol_close_paren )
              parse_single_or_multi_line_statements( cmd_for_each.statements, TokenType.keyword_endForEach )

              return cmd_for_each

            else
              local step_cmd : Cmd
              if (consume(TokenType.keyword_step))
                step_cmd = parse_expression
              endIf

              if (has_parens) must_consume( TokenType.symbol_close_paren )

              local cmd_for_each = CmdForEach( t, access.name, index_var_name, collection, step_cmd )
              parse_single_or_multi_line_statements( cmd_for_each.statements, TokenType.keyword_endForEach )
              return cmd_for_each
            endIf

          elseIf (consume(TokenType.keyword_of))
            if (index_var_name ) throw t.error( "Cannot use 'at' with forEach-of." )
            local collection = parse_expression
            local range = collection as CmdRange
            if (range)
              throw t.error( "Use forEach-in with a literal range instead of forEach-of." )
            else
              local step_cmd : Cmd
              if (consume(TokenType.keyword_step))
                step_cmd = parse_expression
              endIf

              if (has_parens) must_consume( TokenType.symbol_close_paren )

              local cmd_for_each = CmdForEach( t, null, access.name, collection, step_cmd )
              parse_single_or_multi_line_statements( cmd_for_each.statements, TokenType.keyword_endForEach )
              return cmd_for_each
            endIf

          else
            throw t.error( "Syntax error in forEach - keyword 'in' or 'of' expected." )
          endIf
        endIf

      else
        # forEach (expr) e.g. forEach (1..n)
        local range = expr as CmdRange
        if (range)
          local control_var = this_method.add_local( t, Program.create_unique_id )
          control_var.initial_value = range.first

          local last_var = this_method.add_local( t, Program.create_unique_id )
          last_var.initial_value = range.last

          local step_cmd : Cmd
          if (consume(TokenType.keyword_step))
            local step_value = parse_expression
            step_cmd = CmdModifyAndAssignLocal( range.t, control_var, TokenType.symbol_plus_equals, step_value )
          else
            if (range instanceOf CmdRangeUpTo or range instanceOf CmdRangeUpToLessThan)
              step_cmd = CmdAdjustLocal( range.t, control_var, 1 )
            else
              step_cmd = CmdAdjustLocal( range.t, control_var, -1 )
            endIf
          endIf

          local compare_cmd : Cmd
          if (range instanceOf CmdRangeUpTo)
            compare_cmd = CmdCompareLE( t, CmdReadLocal(t,control_var), CmdReadLocal(t,last_var) )
          elseIf (range instanceOf CmdRangeUpToLessThan)
            compare_cmd = CmdCompareLT( t, CmdReadLocal(t,control_var), CmdReadLocal(t,last_var) )
          else
            compare_cmd = CmdCompareGE( t, CmdReadLocal(t,control_var), CmdReadLocal(t,last_var) )
          endIf

          local cmd_for_each = CmdGenericLoop( t, CmdControlStructure.type_forEach, compare_cmd )

          cmd_for_each.add_control_var( control_var )
          cmd_for_each.add_control_var( last_var )
          cmd_for_each.add_upkeep( step_cmd )

          if (has_parens) must_consume( TokenType.symbol_close_paren )
          parse_single_or_multi_line_statements( cmd_for_each.statements, TokenType.keyword_endForEach )

          return cmd_for_each

        else
          throw t.error( "Invalid syntax in forEach." )
        endIf

      endIf

      trace
      throw expr.t.error( "[INTERNAL ERROR]" )

    method peek->Token
      return reader.peek

    method read->Token
      return reader.read

    method read_identifier( allow_at_sign=false:Logical )->String
      local direct_access = false
      if (allow_at_sign) direct_access = consume( TokenType.symbol_at )

      if (not next_is(TokenType.identifier))
        if (next_is(TokenType.type_identifier))
          local result = read->Type.name
          if (direct_access) result = "@" + result
          return result
        endIf
        throw error( "Identifier expected, found $." (peek.quoted_name) )
      endIf

      local result = read->String
      if (direct_access) result = "@" + result
      #while (consume(TokenType.symbol_colon_colon))
      #result += "::" + read_identifier
      #endWhile
      return result

    method parse_expression->Cmd
      consume_eols
      return parse_range

    method parse_range->Cmd
      return parse_range( parse_logical_xor )

    method parse_range( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.symbol_upTo))
        return CmdRangeUpTo( t, lhs, parse_logical_xor )
      elseIf (consume(TokenType.symbol_upToLessThan))
        return CmdRangeUpToLessThan( t, lhs, parse_logical_xor )
        #{
      elseIf (consume(TokenType.symbol_downToGreaterThan))
        return CmdRangeDownToGreaterThan( t, lhs, parse_logical_xor )
        }#
      elseIf (consume(TokenType.keyword_downTo))
        return CmdRangeDownTo( t, lhs, parse_logical_xor )
      else
        return lhs
      endIf

    method parse_logical_xor->Cmd
      return parse_logical_xor( parse_logical_or )

    method parse_logical_xor( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.keyword_xor))
        consume_eols
        return parse_logical_xor( CmdLogicalXor(t, lhs, parse_logical_or) )
      endIf
      return lhs

    method parse_logical_or->Cmd
      return parse_logical_or( parse_logical_and )

    method parse_logical_or( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.keyword_or))
        consume_eols
        return parse_logical_or( CmdLogicalOr(t, lhs, parse_logical_and) )
      endIf
      return lhs

    method parse_logical_and->Cmd
      return parse_logical_and( parse_comparison )

    method parse_logical_and( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.keyword_and))
        consume_eols
        return parse_logical_and( CmdLogicalAnd(t, lhs, parse_comparison) )
      endIf
      return lhs

    method parse_comparison->Cmd
      return parse_comparison( parse_bitwise_xor )

    method parse_comparison( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.symbol_eq))
        consume_eols
        return parse_comparison( CmdCompareEQ(t, lhs, parse_bitwise_xor) )
      elseIf (consume(TokenType.keyword_is))
        consume_eols
        return parse_comparison( CmdCompareIs(t, lhs, parse_bitwise_xor) )
      elseIf (consume(TokenType.symbol_ne))
        consume_eols
        return parse_comparison( CmdCompareNE(t, lhs, parse_bitwise_xor) )
      elseIf (consume(TokenType.keyword_isNot))
        consume_eols
        return parse_comparison( CmdCompareIsNot(t, lhs, parse_bitwise_xor) )
      elseIf (consume(TokenType.symbol_lt))
        consume_eols
        return parse_comparison( CmdCompareLT(t, lhs, parse_bitwise_xor) )
      elseIf (consume(TokenType.symbol_gt))
        consume_eols
        return parse_comparison( CmdCompareGT(t, lhs, parse_bitwise_xor) )
      elseIf (consume(TokenType.symbol_le))
        consume_eols
        return parse_comparison( CmdCompareLE(t, lhs, parse_bitwise_xor) )
      elseIf (consume(TokenType.symbol_ge))
        consume_eols
        return parse_comparison( CmdCompareGE(t, lhs, parse_bitwise_xor) )
      elseIf (consume(TokenType.keyword_instanceOf))
        consume_eols
        return CmdInstanceOf( t, lhs, parse_type )
      elseIf (consume(TokenType.keyword_notInstanceOf))
        consume_eols
        return CmdLogicalNot( t, CmdInstanceOf( t, lhs, parse_type ) )
      endIf
      return lhs

    method parse_bitwise_xor->Cmd
      return parse_bitwise_xor( parse_bitwise_or )

    method parse_bitwise_xor( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.symbol_tilde))
        consume_eols
        return parse_bitwise_xor( CmdBitwiseXor(t,lhs,parse_bitwise_or) )
      endIf
      return lhs

    method parse_bitwise_or->Cmd
      return parse_bitwise_or( parse_bitwise_and )

    method parse_bitwise_or( lhs:Cmd )->Cmd
      local t = peek
      local starting_pos = reader.position
      if (consume(TokenType.symbol_vertical_bar))
        consume_eols
        local rhs = parse_bitwise_and
        return parse_bitwise_or( CmdBitwiseOr(t,lhs,rhs) )
      endIf
      return lhs

    method parse_bitwise_and->Cmd
      return parse_bitwise_and( parse_bitwise_shift )

    method parse_bitwise_and( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.symbol_ampersand))
        consume_eols
        return parse_bitwise_and( CmdBitwiseAnd(t,lhs,parse_bitwise_shift) )
      endIf
      return lhs

    method parse_bitwise_shift->Cmd
      return parse_bitwise_shift( parse_add_subtract )

    method parse_bitwise_shift( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.symbol_shift_left))
        consume_eols
        return parse_add_subtract( CmdBitwiseShiftLeft(t,lhs,parse_add_subtract) )
      elseIf (consume(TokenType.symbol_shift_right))
        consume_eols
        return parse_add_subtract( CmdBitwiseShiftRight(t,lhs,parse_add_subtract) )
      elseIf (consume(TokenType.symbol_shift_right_x))
        consume_eols
        return parse_add_subtract( CmdBitwiseShiftRightX(t,lhs,parse_add_subtract) )
      endIf
      return lhs

    method parse_add_subtract->Cmd
      return parse_add_subtract( parse_multiply_divide_mod )

    method parse_add_subtract( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.symbol_plus))
        consume_eols
        return parse_add_subtract( CmdAdd(t,lhs,parse_multiply_divide_mod) )
      elseIf (consume(TokenType.symbol_minus))
        consume_eols
        return parse_add_subtract( CmdSubtract(t,lhs,parse_multiply_divide_mod) )
      endIf
      return lhs

    method parse_multiply_divide_mod->Cmd
      return parse_multiply_divide_mod( parse_power )

    method parse_multiply_divide_mod( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.symbol_times))
        consume_eols
        return parse_multiply_divide_mod( CmdMultiply(t,lhs,parse_power) )
      elseIf (consume(TokenType.symbol_slash))
        consume_eols
        return parse_multiply_divide_mod( CmdDivide(t,lhs,parse_power) )
      elseIf (consume(TokenType.symbol_percent))
        consume_eols
        return parse_multiply_divide_mod( CmdMod(t,lhs,parse_power) )
      endIf
      return lhs

    method parse_power->Cmd
      return parse_power( parse_pre_unary )

    method parse_power( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.symbol_caret))
        consume_eols
        return parse_power( CmdPower(t,lhs,parse_pre_unary) )
      endIf
      return lhs

    method parse_pre_unary->Cmd
      local t = peek

      if (consume(TokenType.symbol_minus))
        consume_eols
        return CmdNegate( t, parse_pre_unary )

      elseIf (consume(TokenType.keyword_not))
        consume_eols
        return CmdLogicalNot( t, parse_pre_unary )

      elseIf (consume(TokenType.symbol_exclamation_point))
        consume_eols
        return CmdBitwiseNot( t, parse_pre_unary )
      endIf
      #return parse_member_access
      return parse_post_unary

    method parse_post_unary->Cmd
      return parse_post_unary( parse_member_access )

    method parse_post_unary( operand:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.symbol_question_mark))
        return parse_post_unary( CmdLogicalize(t,operand) )
      endIf
      return operand

    method parse_member_access->Cmd
      return parse_member_access( parse_term )

    method parse_member_access( context:Cmd )->Cmd
      local t = peek

      if (consume(TokenType.symbol_dot))
        # Part access e.g. obj.value
        local access = parse_access( t, context )
        return parse_member_access( access )

      elseIf (consume(TokenType.symbol_open_bracket))
        # Parse obj[index]
        consume_eols
        local access = CmdElementAccess( t, context, parse_expression )
        consume_eols
        must_consume( TokenType.symbol_close_bracket )
        return parse_member_access( access )

      elseIf (consume(TokenType.symbol_arrow))
        # Conversion operation e.g. value->Int32
        consume_eols
        local to_type = parse_type
        if (consume(TokenType.symbol_open_paren))
          if (next_is(TokenType.symbol_close_paren))
            throw peek.error( "List conversion function expected." )
          endIf
          local convert_fn = parse_expression
          must_consume( TokenType.symbol_close_paren )
          return parse_member_access( CmdListConvert(t, context, to_type, convert_fn) )
        endIf
        return parse_member_access( CmdConvertToType(t,context,to_type) )

      elseIf (consume(TokenType.symbol_fat_arrow))
        # Callback creator e.g. obj=>method_name or Type=>routine_name
        consume_eols
        local name = read_identifier
        local arg_types : Type[]
        consume_eols
        if (consume(TokenType.symbol_open_paren))
          arg_types = Type[]
          local first = true
          while (first or consume(TokenType.symbol_comma))
            first = false
            consume_eols
            arg_types.add( parse_type )
            consume_eols
          endWhile
          must_consume( TokenType.symbol_close_paren )
          consume_eols
        endIf
        local return_type : Type
        if (consume(TokenType.symbol_arrow)) return_type = parse_type
        return CmdCreateCallback( t, context, name, Program.get_callback_type_signature(arg_types), return_type )

      elseIf (consume(TokenType.keyword_as))
        # Recast operation e.g. actor as Hero
        consume_eols
        local as_type = parse_type
        return parse_member_access( CmdAs(t,context,as_type) )

      endIf

      return context

    method parse_access( t:Token, context=null:Cmd )->Cmd
      consume_eols

      if (consume(TokenType.keyword_meta))
        local context_type : Type
        if (context) context_type = context.implicit_type( Scope(this_type,null) )
        else          context_type = this_type
        if (not context_type) throw t.error( "Unable to determine type for metadata access." )

        must_consume( TokenType.symbol_dot )
        t = peek
        local id = read_identifier
        which (id)
          case "default_value"
            return CmdDefaultValue( t, context_type )
          others
            throw t.error( "'default_value' expected after 'meta.'." )
        endWhich
      endIf

      # In parse_access()
      local access = CmdAccess( t, parse_possible_type(true) )
      if (next_is(TokenType.symbol_open_paren))
        access.args = CmdArgs()
        access.flag_args = parse_args( access.args )
      endIf
      access.context = context
      return access

    # TODO: Add multi-line handling
    method parse_args( args:CmdArgs )->CmdFlagArg[]
      local flag_args : CmdFlagArg[]
      local end_type   = TokenType.symbol_close_paren

      consume( TokenType.symbol_open_paren )
      consume_eols

      if (not consume(end_type))
        local first = true
        while (first or consume(TokenType.symbol_comma))
          first = false
          consume_eols
          if (consume(TokenType.symbol_ampersand))
            if (not flag_args) flag_args = CmdFlagArg[]
            local is_negative = consume( TokenType.symbol_exclamation_point )
            local arg_t = peek
            local arg = CmdFlagArg( arg_t, read_identifier )
            arg.is_negative = is_negative
            flag_args.add( arg )
            if (consume(TokenType.symbol_equals))
              arg.value = parse_expression
            endIf
          else
            args.add( parse_expression )
          endIf
        endWhile
        consume_eols
        must_consume( end_type )
      endIf

      return flag_args


    method parse_specialization_string->String
      string_buffer.clear
      read   # '<<'
      string_buffer.print( "<<" )

      local first = true
      while (first or consume(TokenType.symbol_comma))
        if (first) first = false
        else       string_buffer.print(',')
        parse_specializer( string_buffer )
      endWhile

      must_consume( TokenType.symbol_close_specialize )
      string_buffer.print( ">>" )

      return string_buffer->String

    method parse_specializer_count->Int32
      local num_specializers = 0
      read   # '<<'

      local first = true
      while (first or consume(TokenType.symbol_comma))
        if (first) first = false
        parse_specializer( string_buffer.clear )
        ++num_specializers
      endWhile

      must_consume( TokenType.symbol_close_specialize )

      return num_specializers

    method parse_specializer( buffer=string_buffer:StringBuilder, tokens=null:Token[] )
      local nesting_level = 1
      while (reader.has_another)
        if (next_is(TokenType.eol))
          throw peek.error( "Closing '>>' expected before end of line." )
        endIf

        local t = peek
        if (consume(TokenType.symbol_backslash))
          buffer.print("\\")

          if (not reader.has_another) throw t.error( "Unexpected end of input." )

          t = read
          buffer.print( t )
          if (tokens) tokens.add( t )

        elseIf (t.type is TokenType.symbol_comma)
          if (nesting_level == 1) return
          read
          if (tokens) tokens.add( t )
          buffer.print(',')

        elseIf (consume(TokenType.symbol_open_specialize))
          if (tokens) tokens.add( t )
          buffer.print("<<")
          ++nesting_level

        elseIf (next_is(TokenType.symbol_close_specialize))
          --nesting_level
          if (nesting_level == 0)
            return
          else
            read
            if (tokens) tokens.add( t )
            buffer.print( ">>" )
          endIf

        else
          if (tokens) tokens.add( t )
          local st = read->String
          if (t.type is TokenType.literal_string)
            buffer.print( '"' ).print( st ).print( '"' )
          else
            buffer.print( st )
          endIf
        endIf
      endWhile

    method parse_term->Cmd
      local t = peek
      if (consume(TokenType.symbol_open_paren))
        consume_eols
        if (next_is(TokenType.symbol_close_paren))
          throw t.error( "Value expected, found empty parentheses ()." )
        endIf
        local result = parse_expression
        consume_eols
        must_consume( TokenType.symbol_close_paren )
        return result

      elseIf (next_is(TokenType.identifier) or next_is(TokenType.symbol_at) or next_is(TokenType.keyword_meta))
        local result = parse_access( t )
        local access = result as CmdAccess
        if (access and access.name.ends_with(']') and not access.args)
          if (next_is(TokenType.symbol_open_bracket)) return parse_typed_literal_list( access.t, access.name )
        endIf
        return result

      elseIf (next_is(TokenType.type_identifier))
        local result = parse_access( t )
        return result

      elseIf (consume(TokenType.literal_string))

        if (consume(TokenType.symbol_open_paren))
          local first = true
          local args = CmdArgs()
          while (first or consume(TokenType.symbol_comma))
            first = false
            args.add( parse_expression )
          endWhile
          must_consume( TokenType.symbol_close_paren )
          return CmdFormattedString( t, t->String, args )
        endIf

        return CmdLiteralString( t, t->String )

      elseIf (consume(TokenType.keyword_null))
        return CmdLiteralNull(t)

      elseIf (consume(TokenType.literal_real))
        return CmdLiteralReal64( t, t->Real64 )

      elseIf (consume(TokenType.literal_integer))
        local value = t->Int32
        return CmdLiteralInt32( t, value )

      elseIf (consume(TokenType.literal_long))
        local value = t->Int64
        return CmdLiteralInt64( t, value )

      elseIf (consume(TokenType.literal_character))
        local value = t->Character
        return CmdLiteralCharacter( t, value->Character )

      elseIf (consume(TokenType.keyword_this))
        return CmdLiteralThis( t, this_type )

      elseIf (consume(TokenType.keyword_true))
        return CmdLiteralLogical( t, true )

      elseIf (consume(TokenType.keyword_false))
        return CmdLiteralLogical( t, false )

      elseIf (consume(TokenType.keyword_pi))
        return CmdLiteralReal64( t, pi )

      elseIf (consume(TokenType.keyword_infinity))
        return CmdLiteralReal64( t, 1.0/0.0 )

      elseIf (consume(TokenType.keyword_NaN))
        return CmdLiteralReal64( t, 0.0/0.0 )

      elseIf (consume(TokenType.symbol_open_bracket))
        # [ literal, list ]
        #{
        if (parsing_properties)
          local cmd = CmdNewObject( t, Program.get_type_reference(t,"PropertyList") ) : Cmd

          local first = true
          while (first or consume(TokenType.symbol_comma))
            first = false
            local value = parse_expression
            cmd = CmdAccess( value.t, cmd, "add", CmdArgs(value) )
            consume_eols
          endWhile
          must_consume( TokenType.symbol_close_bracket )

          return cmd

        else
          }#
          local list = CmdCreateList( t )
          consume_eols
          if (not consume(TokenType.symbol_close_bracket))
            local first = true
            while (first or consume(TokenType.symbol_comma))
              first = false
              list.args.add( parse_expression )
              consume_eols
            endWhile
            must_consume( TokenType.symbol_close_bracket )
          endIf
          return list
        #endIf

      #{
      elseIf (consume(TokenType.symbol_open_brace))
        # { key:value, key:value, ... }
        local table = CmdLiteralTable(t)
        consume_eols
        if (not consume(TokenType.symbol_close_brace))
          local first = true
          while (first or consume(TokenType.symbol_comma))
            first = false
            if (peek.type == TokenType.identifier)
              local kt = read
              table.keys.add( CmdLiteralTableKey(kt, kt->String) )
            else
              ++parsing_properties
              table.keys.add( parse_expression )
              --parsing_properties
            endIf
            must_consume( TokenType.symbol_colon )
#local expr = parse_expression
#trace expr
#table.values.add( expr )
            ++parsing_properties
            table.values.add( parse_expression )
            --parsing_properties
            consume_eols
          endWhile
          must_consume( TokenType.symbol_close_brace )
        endIf
        return table

      elseIf (consume(TokenType.symbol_empty_braces))
        return CmdCreateObject( t, Program.get_type_reference( t, "PropertyTable" ) )
        }#

      elseIf (consume(TokenType.symbol_empty_brackets))
        return CmdAccess( t, "PropertyList",  CmdArgs() )

      elseIf (consume(TokenType.keyword_prior))
        consume_eols
        must_consume( TokenType.symbol_dot )
        consume_eols
        local name = read_identifier
        local args : CmdArgs
        local flag_args : CmdFlagArg[]
        if (next_is(TokenType.symbol_open_paren))
          args = CmdArgs()
          flag_args = parse_args( args )
        endIf
        return CmdCallPriorMethod( t, name, args, flag_args )

      elseIf (consume(TokenType.keyword_await))
        # Insert a local result declaration and a statement list to hold the
        # await cmd and subsequent conversion.  Substitute the result var in
        # place of this term.
        #
        #   x = await some_task(a,b)
        #
        # ->
        #
        #   local result : TBD
        #   {
        #     task = some_task(a,b)   # result.type = task result type
        #     while (task.update) yield
        #     result = task.result
        #   }
        #   x = result
        #
        local result_var = this_method.add_local( t, Program.create_unique_id, Program.type_Object )
        local statement_list = CmdStatementList()
        cur_statement_list.add( CmdLocalDeclaration(t,result_var) )
        cur_statement_list.add( CmdAwait(t,parse_expression,statement_list,result_var) )
        return CmdAccess( t, result_var.name )

      elseIf (consume(TokenType.keyword_function))
        local parameters : FnParam[]
        local return_type : Type
        local is_generic = false
        if (consume(TokenType.symbol_open_paren))
          if (not consume(TokenType.symbol_close_paren))
            parameters = FnParam[]
            local first = true
            while (first or consume(TokenType.symbol_comma))
              first = false
              local param = FnParam( read_identifier )
              local t2 = peek
              local cur_generic = false
              if (consume(TokenType.symbol_colon)) param.type = parse_type
              else                                 cur_generic = true

              if (parameters.count and (is_generic != cur_generic))
                throw t2.error( "function parameters must all be typed or all be generic." )
              endIf

              is_generic = cur_generic
              parameters.add( param )
            endWhile
            must_consume( TokenType.symbol_close_paren )
          endIf
        endIf

        local parsed_arrow = false
        local t2 = peek
        if (consume(TokenType.symbol_arrow))
          if (is_generic) throw t2.error( "A function with generic parameters must use '=>' to define its body." )
          parsed_arrow = true
          return_type = parse_type
        endIf

        local with_args : FnArg[]
        if (consume(TokenType.keyword_with))
          must_consume( TokenType.symbol_open_paren )
          if (not consume(TokenType.symbol_close_paren))
            with_args = FnArg[]
            local first = true
            while (first or consume(TokenType.symbol_comma))
              first = false
              t2 = peek
              local name  = read_identifier
              local value : Cmd
              if (consume(TokenType.symbol_equals))
                value = parse_expression
              else
                # Function definition
                value = CmdAccess( t2, name )
              endIf
              local arg = FnArg( name, value )
              if (consume(TokenType.symbol_colon)) arg.type = parse_type
              with_args.add( arg )
            endWhile
            must_consume(TokenType.symbol_close_paren)
          endIf
        endIf

        consume( TokenType.symbol_colon )  # totally optional

        if (not parsed_arrow)
          t2 = peek
          if (consume(TokenType.symbol_equals))
            if (parameters and parameters.count and not is_generic)
              # Note: if there are no parameters then 'is_generic' is not valid and we can accept
              # the generic arrow
              throw t2.error( "A function with typed parameters must use '->' to define its return type (if desired) and cannot use the generic function definition symbol '='." )
            endIf

            is_generic = true
          endIf
        endIf

        local statements = CmdStatementList()
        if (not is_generic and consume_eols)
          parse_multi_line_statements( statements )
          must_consume( TokenType.keyword_endFunction )
        else
          parse_single_line_statements( statements )
        endIf

        return CmdCreateFunction( t, parameters, return_type, with_args, statements, is_generic )

      elseIf (consume(TokenType.keyword_native))
        consume_eols
        local has_parens = consume( TokenType.symbol_open_paren )
        if (has_parens) consume_eols

        if (not next_is(TokenType.literal_string))
          throw peek.error( "Literal string expected." )
        endIf
        local code = read->String

        if (has_parens)
          consume_eols
          must_consume( TokenType.symbol_close_paren )
        endIf

        local result_type : Type
        if (consume(TokenType.symbol_arrow)) result_type = parse_type

        return CmdInlineNative( t, code, result_type )

      elseIf (consume(TokenType.keyword_select))
        consume_eols
        local cmd_select = CmdSelect( t )

        if (consume(TokenType.symbol_open_paren))
          consume_eols
          local comparison_var = this_method.add_local( t, Program.create_unique_id )
          cur_statement_list.add( CmdLocalDeclaration(t,comparison_var,&skip_initialization) )
          comparison_var.initial_value = parse_expression
          cmd_select.local_info = comparison_var
          cmd_select.expression = comparison_var.initial_value
          consume_eols
          must_consume( TokenType.symbol_close_paren )
          consume_eols
        endIf

        must_consume( TokenType.symbol_open_brace )
        local first = true
        while (first or consume(TokenType.symbol_double_vertical_bar))
          first = false
          consume_eols
          local select_case = CmdSelectCase( peek )
          cmd_select.cases.add( select_case )

          if (consume(TokenType.keyword_others))
            consume_eols
            must_consume( TokenType.symbol_colon )
            consume_eols

            # If we don't use the 'others' keyword then the last value
            # will end up in 'conditions' to begin with so stick to that
            # pattern.
            select_case.conditions.add( parse_expression )

            escapeWhile

          else
            select_case.conditions.add( parse_expression )
            while (consume(TokenType.symbol_comma))
              consume_eols
              select_case.conditions.add( parse_expression )
              consume_eols
            endWhile

            if (consume(TokenType.symbol_colon))
              consume_eols
              select_case.value = parse_expression
              consume_eols
            elseIf (select_case.conditions.count > 1)
              must_consume( TokenType.symbol_colon )  # Force an error
            endIf
          endIf
        endWhile

        if (cmd_select.cases.last.conditions.count > 1)
          throw t.error( "The last part of a select{} must be a single expression." )
        elseIf (cmd_select.cases.last.value)
          throw t.error( "The last part of a select{} cannot have a condition." )
        else
          cmd_select.cases.last.value = cmd_select.cases.last.conditions.remove_first
          cmd_select.cases.last.conditions.clear
        endIf

        must_consume( TokenType.symbol_close_brace )

        return cmd_select

      else
        #throw peek.error( "Syntax error: unexpected '$'." (peek) )
        #trace peek.type
        throw peek.error( "Syntax error: unexpected '" + peek + "'." )
      endIf

    method parse_typed_literal_list( t:Token, list_type_name:String )->Cmd
      local list = CmdTypedLiteralList( t, list_type_name )

      must_consume( TokenType.symbol_open_bracket )
      consume_eols

      local first = true
      while (first or consume(TokenType.symbol_comma))
        first = false
        consume_eols
        t = peek
        if (next_is(TokenType.symbol_open_bracket))
          # Nested list - propagate the type
          if (list_type_name.ends_with("[][]"))
            local item = parse_typed_literal_list( t, list_type_name.leftmost(-2) )
            list.add( item )
          else
            throw t.error( "Literal list content contains more dimensions than literal list type." )
          endIf
        else
          list.add( parse_expression )
        endIf
        consume_eols
      endWhile
      must_consume( TokenType.symbol_close_bracket )

      return list
endClass

class FnParam( name:String )
  PROPERTIES
    type : Type
endClass

class FnArg( name:String, value:Cmd )
  PROPERTIES
    type : Type

  METHODS
    method set_type( @type )->FnArg
      return this
endClass
