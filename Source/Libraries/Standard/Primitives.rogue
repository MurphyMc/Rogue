class PrimitiveWorkBuffer : StringBuilder [singleton];

class Real64 [primitive]
  GLOBAL METHODS
    method create( bits:Int64 )->Real64
      $if ("C++")
        native "return *((RogueReal64*)&$bits);"
      $endIf

  METHODS
    method abs->Real64
      if (this >= 0) return this
      else           return -this

    method integer_bits->Int64
      return Int64( this )

    method clamped( low:Real64, high:Real64 )->Real64
      if (this < low)  return low
      if (this > high) return high
      return this

    method decimal_digit_count->Int32
      PrimitiveWorkBuffer.clear.print( this )
      local dot = PrimitiveWorkBuffer.locate( '.' )

      # NaN, +/- infinity
      if (not dot.exists) return 0

      local start = dot.value + 1
      local count = PrimitiveWorkBuffer.count

      # Check for "3.0" etc.
      if (count == start + 1 and PrimitiveWorkBuffer[start] == '0') return 0

      return (count - start)

    method digit_count->Int32
      return PrimitiveWorkBuffer.clear.print( this ).count

    method hash_code->Int32
      return Int64(this)->Int32

    method is_finite->Logical
      return (this == this) and (this - this == 0)

    method is_infinite->Logical
      # Returns true for positive OR negative infinity
      return (this == this) and (this - this != 0)

    method is_NaN->Logical
      return (this != this)

    method is_not_a_number->Logical
      return (this != this)

    method is_number->Logical
      return (this == this) and (this - this == 0)

    method to->Object
      return Boxed<<Real64>>(this)

    method to->String
      return "" + this

    method to_power_of_2->Real64
      return this->Int64.to_power_of_2->Real64

    method whole_digit_count->Int32
      return PrimitiveWorkBuffer.clear.print( this ).locate( '.' ).value
endClass

class Real32 [primitive]
  GLOBAL METHODS
    method create( bits:Int32 )->Real32
      $if ("C++")
        native "return *((RogueReal32*)&$bits);"
      $endIf

  METHODS
    method abs->Real32
      if (this >= 0) return this
      else           return -this

    method integer_bits->Int32
      return Int32( this )

    method clamped( low:Real32, high:Real32 )->Real32
      if (this < low)  return low
      if (this > high) return high
      return this

    method digit_count->Int32
      return PrimitiveWorkBuffer.clear.print( this ).count

    method decimal_digit_count->Int32
      return this->Real64.decimal_digit_count

    method is_finite->Logical
      return (this == this) and (this - this == 0)

    method is_infinite->Logical
      # Returns true for positive OR negative infinity
      return (this == this) and (this - this != 0)

    method is_NaN->Logical
      return (this != this)

    method is_not_a_number->Logical
      return (this != this)

    method is_number->Logical
      return (this == this) and (this - this == 0)

    method to->Object
      return Boxed<<Real32>>(this)

    method to_power_of_2->Real32
      return this->Int64.to_power_of_2->Real32

    method whole_digit_count->Int32
      return this->Real64.whole_digit_count
endClass

class Int64 [primitive]
  GLOBAL METHODS
    method create( bit_source:Real64 )->Int64
      $if ("C++")
        native "return *((RogueInt64*)&$bit_source);"
      $endIf

  METHODS
    method abs->Int64
      if (this >= 0) return this
      else           return -this

    method real_bits->Real64
      return Real64( this )

    method clamped( low:Int64, high:Int64 )->Int64
      if (this < low)  return low
      if (this > high) return high
      return this

    method digit_count->Int32
      return PrimitiveWorkBuffer.clear.print( this ).count

    method hash_code->Int32
      return this

    method print_in_power2_base( base:Int32, digits=16:Int32, buffer:StringBuilder )->StringBuilder
      local bits = 0
      local temp = base
      while (temp > 1) ++bits; temp = temp:>>>:1

      if (digits > 1) (this:>>>:bits).print_in_power2_base( base, digits-1, buffer )
      buffer.print( (this & (base-1)).to_digit )
      return buffer

    method to->Object
      return Boxed<<Int64>>(this)

    method to->String
      return StringBuilder().print( this )->String

    method to_digit->Character [macro]
      (this->Int32).to_digit

    method to_binary_string( digits=64:Int32 )->String
      return print_in_power2_base( 2, digits, StringBuilder() )->String

    method to_hex_string( digits=16:Int32 )->String
      return print_in_power2_base( 16, digits, StringBuilder() )->String

    method to_octal_string( digits=22:Int32 )->String
      return print_in_power2_base( 8, digits, StringBuilder() )->String

    method to_power_of_2->Int64
      if (this & 0xC000000000000000 or not this) return this
      local p2 = 1 : Int64
      while (p2 < this) p2 = p2 :<<: 1
      return p2
endClass

class Int32 [primitive]
  GLOBAL METHODS
    method create( bit_source:Real32 )->Int32
      $if ("C++")
        native "return *((RogueInt32*)&$bit_source);"
      $endIf

  METHODS
    method abs->Int32
      if (this >= 0) return this
      else           return -this

    method real_bits->Real32
      return Real32( this )

    method clamped( low:Int32, high:Int32 )->Int32
      if (this < low)  return low
      if (this > high) return high
      return this

    method digit_count->Int32
      return PrimitiveWorkBuffer.clear.print( this ).count

    method hash_code->Int32
      return this

    method to->Int64 [macro]
      $if ("C++") native "((RogueInt64)$this)"

    method to->Object
      return Boxed<<Int32>>(this)

    method to->String
      return "" + this

    method to_digit->Character
      if (this >= 0 and this <= 9)   return (this + '0')->Character
      if (this >= 10 and this <= 35) return ((this - 10) + ('A'))->Character
      return '0'

    method to_binary_string( digits=32:Int32 )->String
      return (this->Int64).print_in_power2_base( 2, digits, StringBuilder() )->String

    method to_hex_string( digits=8:Int32 )->String
      return (this->Int64).print_in_power2_base( 16, digits, StringBuilder() )->String

    method to_octal_string( digits=11:Int32 )->String
      return (this->Int64).print_in_power2_base( 8, digits, StringBuilder() )->String

    method to_power_of_2->Int32
      if (this & 0xC0000000 or not this) return this
      local p2 = 1
      while (p2 < this) p2 = p2 :<<: 1
      return p2

    method maximum->Int32 [macro]
      2147483647

    method minimum->Int32 [macro]
      native "(-2147483647 - 1)"
endClass

class Character [primitive]
  METHODS
    method clamped( low:Character, high:Character )->Character
      if (this < low)  return low
      if (this > high) return high
      return this

    method digit_count->Int32
      return 1

    method hash_code->Int32
      return this->Int32

    method is_alphanumeric->Logical
      return (this >= '0' and this <= '9') or
             (this >= 'a' and this <= 'z') or
             (this >= 'A' and this <= 'Z')

    method is_identifier->Logical
      return (this >= 'a' and this <= 'z') or
             (this >= 'A' and this <= 'Z') or
             (this == '_')                 or
             (this >= '0' and this <= '9')

    method is_letter->Logical
      return (this >= 'a' and this <= 'z') or
             (this >= 'A' and this <= 'Z')

    method is_number( base=10:Int32 )->Logical
      return to_number(base) != -1

    method to->Object
      return Boxed<<Character>>(this)

    method to->String
      return "" + this

    method to_binary_string( digits=16:Int32 )->String
      return (this->Int64).print_in_power2_base( 2, digits, StringBuilder() )->String

    method to_hex_string( digits=4:Int32 )->String
      return (this->Int64).print_in_power2_base( 16, digits, StringBuilder() )->String

    method to_octal_string( digits=6:Int32 )->String
      return (this->Int64).print_in_power2_base( 8, digits, StringBuilder() )->String

    method to_number( base=10:Int32 )->Int32
      if (this >= '0' and this < '0'+base)      return (this - '0')
      if (this >= 'a' and this < 'a'+(base-10)) return (this - 'a') + 10
      if (this >= 'A' and this < 'A'+(base-10)) return (this - 'A') + 10
      return -1
endClass

class Byte [primitive]
  METHODS
    method clamped( low:Byte, high:Byte )->Byte
      if (this < low)  return low
      if (this > high) return high
      return this

    method digit_count->Int32
      return PrimitiveWorkBuffer.clear.print( this ).count

    method hash_code->Int32
      return this->Int32

    method signed->Int32
      if (this <= 127) return this
      return (this - 256)

    method to->Object
      return Boxed<<Byte>>(this)

    method to->String
      return "" + this

    method to_binary_string( digits=8:Int32 )->String
      return (this->Int64).print_in_power2_base( 2, digits, StringBuilder() )->String

    method to_hex_string( digits=2:Int32 )->String
      return (this->Int64).print_in_power2_base( 16, digits, StringBuilder() )->String

    method to_octal_string( digits=3:Int32 )->String
      return (this->Int64).print_in_power2_base( 8, digits, StringBuilder() )->String
endClass

class Logical [primitive]
  METHODS
    method digit_count->Int32
      if (this) return 4  # "true"
      else      return 5  # "false"

    method hash_code->Int32
      if (this) return 1
      else      return 0

    method to->Object
      return Boxed<<Logical>>(this)

    method to->String
      return "" + this
endClass

