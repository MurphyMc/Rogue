class Table<<$KeyType,$ValueType>>
  PROPERTIES
    bin_mask : Int32
    bins     : TableEntry<<$KeyType,$ValueType>>[]
    keys     : $KeyType[]

  METHODS
    method init
      init( 16 )

    method init( bin_count:Int32 )
      local bins_power_of_2 = 1
      while (bins_power_of_2 < bin_count) bins_power_of_2 = bins_power_of_2 :<<: 1
      bin_count = bins_power_of_2
      bin_mask = bin_count - 1

      bins = TableEntry<<$KeyType,$ValueType>>[]( bin_count, null )
      keys = $KeyType[]

    method init( other:Table<<$KeyType,$ValueType>> )
      bin_mask = other.bin_mask
      bins = other.bins.cloned
      keys = other.keys.cloned

    method add( other:Table<<$KeyType,$ValueType>> )->Table<<$KeyType,$ValueType>>
      forEach (key in other.keys) this[key] = other[key]
      return this

    method at( index:Int32 )->$ValueType
      return get( keys[index] )

    method clear
      forEach (i of bins) bins[i] = null
      keys.clear

    method cloned->Table<<$KeyType,$ValueType>>
      return Table<<$KeyType,$ValueType>>( this )

    method contains( key:$KeyType )->Logical
      return find(key)

    method count->Int32
      return keys.count

    method is_empty->Logical
      return count == 0

    method find( key:$KeyType )->TableEntry<<$KeyType,$ValueType>>
      local hash = key.hash_code
      local entry = bins[ hash & bin_mask ]

      while (entry)
        if (entry.hash == hash and entry.key == key) return entry
        entry = entry.next_entry
      endWhile

      return null

    method get( key:$KeyType )->$ValueType
      local entry = find( key )
      if (entry)
        return entry.value
      else
        local default_value : $ValueType
        return default_value
      endIf

    method remove( key:$KeyType )->$ValueType
      local hash = key.hash_code
      local index = hash & bin_mask
      local entry = bins[ index ]

      if (not entry)
        local default_zero_value : $ValueType
        return default_zero_value
      endIf

      keys.remove( key )

      if (entry.hash == hash and entry.key == key)
        # First item in hash bin
        bins[index] = entry.next_entry
        return entry.value
      endIf

      local next_entry = entry.next_entry
      while (next_entry)
        # Later item in hash bin
        if (next_entry.hash == hash and next_entry.key == key)
          local result = entry.value
          entry.next_entry = next_entry.next_entry
          return result
        endIf
        entry = next_entry
        next_entry = entry.next_entry
      endWhile

      local default_zero_value : $ValueType
      return default_zero_value

    method set( key:$KeyType, value:$ValueType )->this
      local hash = key.hash_code
      local index = hash & bin_mask
      local entry = bins[ index ]

      while (entry)
        if (entry.hash == hash and entry.key == key)
          entry.value = value
          return this
        endIf
        entry = entry.next_entry
      endWhile

      entry = TableEntry<<$KeyType,$ValueType>>( key, value, hash )
      entry.next_entry = bins[ index ]
      bins[index] = entry

      keys.add( key )
      return this

    method to->String
      return print_to( StringBuilder() )->String

    method print_to( buffer:StringBuilder )->StringBuilder
      buffer.print( '{' )
      local i = 0
      while (i < keys.count)
        if (i > 0) buffer.print( ',' )
        local key = keys[i]
        buffer.print( key )
        buffer.print( ':' )
        buffer.print( this[key] )
        ++i
      endWhile
      buffer.print( '}' )
      return buffer

    method values->$ValueType[]
      local r = $ValueType[]
      forEach (k in keys)
        r.add(get(k))
      endForEach
      return r

    method item_reader->TableReader<<$KeyType,$ValueType>>
      return TableReader<<$KeyType,$ValueType>>(this)

    method value_reader->TableValueReader<<$KeyType,$ValueType>>
      return TableValueReader<<$KeyType,$ValueType>>(this)

    method key_reader->TableKeyReader<<$KeyType,$ValueType>>
      return TableKeyReader<<$KeyType,$ValueType>>(this)
endClass


class TableReader<<$KeyType,$ValueType>> : Reader<<TableEntry<<$KeyType,$ValueType>>>>
  PROPERTIES
    table : Table<<$KeyType,$ValueType>>

  METHODS
    method init (table)
      noAction

    method has_another->Logical
      return @position < table.count

    method peek->TableEntry<<$KeyType,$ValueType>>
      return table.find(table.keys[@position])

    method read->TableEntry<<$KeyType,$ValueType>>
      local r = peek()
      @position++
      return r
endClass


class TableKeyReader<<$KeyType, $ValueType>> : Reader<<$KeyType>>
  PROPERTIES
    table : Table<<$KeyType,$ValueType>>

  METHODS
    method init (table)
      noAction

    method has_another->Logical
      return @position < table.count

    method peek->$KeyType
      return table.keys[@position]

    method read->$KeyType
      local r = peek()
      @position++
      return r
endClass


class TableValueReader<<$KeyType, $ValueType>> : Reader<<$ValueType>>
  PROPERTIES
    table : Table<<$KeyType,$ValueType>>

  METHODS
    method init (table)
      noAction

    method has_another->Logical
      return @position < table.count

    method peek->$ValueType
      return table.find(table.keys[@position]).value

    method read->$ValueType
      local r = peek()
      @position++
      return r
endClass


class TableEntry<<$KeyType,$ValueType>>
  PROPERTIES
    key        : $KeyType
    value      : $ValueType
    next_entry : TableEntry<<$KeyType,$ValueType>>
    hash       : Int32

  METHODS
    method init( _key:$KeyType, _value:$ValueType, _hash:Int32 )
      key = _key
      value = _value
      hash = _hash

    method to->String
      return "($ $:$)" (type_name, key, value)
endClass


class StringTable<<$ValueType>> : Table<<String,$ValueType>>
  # Adds support for StringBuilder keys.
  METHODS
    method contains( key:StringBuilder )->Logical
      return find_key( key )?

    method find( key:StringBuilder )->TableEntry<<String,$ValueType>>
      local key_string = find_key( key )
      if (not key_string) return null
      return find( key_string )

    method find_key( key:StringBuilder )->String
      local len  = key.count
      local hash = key.hash_code
      forEach (k in keys)
        if (k.hash_code == hash and k.count == len and k == key) return k
      endForEach
      return null

    method get( key:StringBuilder )->$ValueType
      local key_string = find_key( key )
      if (not key_string)
        local default_value : $ValueType
        return default_value
      endIf
      return get( key_string )

    method remove( key:StringBuilder )->$ValueType
      local key_string = find_key( key )
      if (not key_string)
        local default_value : $ValueType
        return default_value
      endIf
      return remove( key_string )

    method set( key:StringBuilder, value:$ValueType )->this
      local key_string = find_key( key )
      if (not key_string) return this
      set( key_string, value )
      return this

endClass

