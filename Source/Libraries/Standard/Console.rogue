class Console : Reader<<Character>>, BufferedPrintWriter<<output_buffer>> [singleton]
  DEPENDENCIES
    nativeHeader
      #ifdef ROGUE_PLATFORM_WINDOWS
        #define ROGUE_CONSOLE_FULL 0
      #else
        #define ROGUE_CONSOLE_FULL 1
      #endif
      #if ROGUE_CONSOLE_FULL
        #include <termios.h>
        #include <unistd.h>
        #include <sys/ioctl.h>
      #endif
      #ifndef STDIN_FILENO     /* Probably Windows */
        #define STDIN_FILENO 0 /* Probably correct */
      #endif
      #if defined(ROGUE_PLATFORM_WINDOWS)
        #include <io.h>
        #define ROGUE_READ_CALL _read
      #else
        #define ROGUE_READ_CALL read
      #endif
    endNativeHeader

  ENUMERATE
    UP_ARROW    = 17
    DOWN_ARROW  = 18
    RIGHT_ARROW = 19
    LEFT_ARROW  = 20

  GLOBAL METHODS
    method input( prompt=null:String )->String
      if (prompt) Global.print( prompt ).flush

      native @|char st[4096];
              |if (!fgets( st, 4096, stdin ))
              |{
              |  return RogueString_create_from_utf8( st, 0 );
              |}
              |
              |// discard \n
              |int len = strlen( st );
              |if (len) st[--len] = 0;
              |else st[0] = 0;
              |
              |return RogueString_create_from_utf8( st, len );

  PROPERTIES
    error             = ConsoleErrorPrinter()

    immediate_mode       = false
    # Setting to true/false automatically sets is_blocking to false/true

    is_blocking          = true

    decode_bytes         = true

    input_buffer         = StringBuilder()

    next_input_character : Int32?
    input_bytes          = Byte[]

    native @|#if (ROGUE_CONSOLE_FULL)
            |  termios original_terminal_settings;
            |  int     original_stdin_flags;
            |#endif

  METHODS
    method init
      native @|#if (ROGUE_CONSOLE_FULL)
              |  tcgetattr( STDIN_FILENO, &$this->original_terminal_settings );
              |  $this->original_stdin_flags = fcntl( STDIN_FILENO, F_GETFL );
              |#endif

      native @|#ifdef ROGUE_PLATFORM_WINDOWS
              |  // Enable ANSI colors and styles on Windows
              |  HANDLE h_stdout = GetStdHandle( STD_OUTPUT_HANDLE );
              |  DWORD mode;
              |  GetConsoleMode( h_stdout, &mode);
              |  SetConsoleMode( h_stdout, mode | ENABLE_VIRTUAL_TERMINAL_PROCESSING );
              |#endif
              on_exit( function with (console=this) => console.reset_input_mode )

    method clear
      print( "\e[2J" ).flush

    method clear_to_eol
      print( "\e[K" ).flush

    method fill_input_queue
      # Internal use
      local n : Int32
      native @|char bytes[8];
              |$n = (RogueInt32) ROGUE_READ_CALL( STDIN_FILENO, &bytes, 8 );
      if (n > 0)
        forEach (i in 0..<n)
          input_bytes.add( native("((RogueByte)bytes[$i])")->Byte )
        endForEach
      endIf

    method flush( buffer:StringBuilder )
      write( buffer )
      buffer.clear

    method has_another->Logical
      if (not next_input_character.exists)
        fill_input_queue
        if (input_bytes.count)
          local b1 = input_bytes.remove_first
          contingent
            necessary (decode_bytes)
            necessary (input_bytes.count)  # more available?

            # More available
            if (b1 == 27)
              # Escape sequence
              necessary (input_bytes.count >= 2 and input_bytes.first == 91)
              input_bytes.remove_first
              next_input_character = (input_bytes.remove_first - 65) + Console.UP_ARROW

            else
              necessary (b1 >= 0xC0)

              local result : Int32

              # UTF-8
              if ((b1 & 0b1110_0000) == 0b1100_0000)
                necessary (input_bytes.count >= 1)
                result = b1 & 0b0001_1111
                result = (result :<<: 6) | (input_bytes.remove_first & 0b11_1111)
              elseIf ((b1 & 0b1111_0000) == 0b1110_0000)
                necessary (input_bytes.count >= 2)
                result = b1 & 0b0000_1111
                result = (result :<<: 6) | (input_bytes.remove_first & 0b11_1111)
                result = (result :<<: 6) | (input_bytes.remove_first & 0b11_1111)
              elseIf ((b1 & 0b1111_1000) == 0b1111_0000)
                necessary (input_bytes.count >= 3)
                result = b1 & 0b0000_0111
                result = (result :<<: 6) | (input_bytes.remove_first & 0b11_1111)
                result = (result :<<: 6) | (input_bytes.remove_first & 0b11_1111)
                result = (result :<<: 6) | (input_bytes.remove_first & 0b11_1111)
              elseIf ((b1 & 0b1111_1100) == 0b1111_1000)
                necessary (input_bytes.count >= 4)
                result = b1 & 0b0000_0011
                result = (result :<<: 6) | (input_bytes.remove_first & 0b11_1111)
                result = (result :<<: 6) | (input_bytes.remove_first & 0b11_1111)
                result = (result :<<: 6) | (input_bytes.remove_first & 0b11_1111)
                result = (result :<<: 6) | (input_bytes.remove_first & 0b11_1111)
              else
                necessary (input_bytes.count >= 5)
                result = b1 & 0b0000_0001
                result = (result :<<: 6) | (input_bytes.remove_first & 0b11_1111)
                result = (result :<<: 6) | (input_bytes.remove_first & 0b11_1111)
                result = (result :<<: 6) | (input_bytes.remove_first & 0b11_1111)
                result = (result :<<: 6) | (input_bytes.remove_first & 0b11_1111)
                result = (result :<<: 6) | (input_bytes.remove_first & 0b11_1111)
              endIf

              next_input_character = result
            endIf

          unsatisfied
            next_input_character = b1

          endContingent

          if (input_bytes.count > 0 and input_bytes.count < 6)
            # If there are more bytes left then characters are getting piped or redirected in.
            # Read enough to make sure we have a full UTF-8 sequence for next time.
            fill_input_queue
          endIf

        endIf
      endIf
      return next_input_character.exists

    method height->Int32
      native @|#if (ROGUE_CONSOLE_FULL)
              |  struct winsize sz;
              |  ioctl( STDOUT_FILENO, TIOCGWINSZ, &sz );
              |
              |  return sz.ws_row;
              |#else
              |  return 24;
              |#endif

    method move_cursor( dx:Int32, dy:Int32 )
      if (dx)
        if (dx > 0) print( "\e[" ).print(  dx ).print( 'C' )
        else        print( "\e[" ).print( -dx ).print( 'D' )
      endIf
      if (dy)
        if (dy > 0) print( "\e[" ).print(  dy ).print( 'B' )
        else        print( "\e[" ).print( -dy ).print( 'A' )
      endIf
      Global.flush

    method peek->Character
      if (has_another) return next_input_character.value
      else             return 0

    method read->Character
      if (not has_another) return 0
      local result = next_input_character.value
      next_input_character = null
      return result

    method read_line->String
      input_buffer.clear
      forEach (byte in this)
        if (byte == 10) escapeForEach
        input_buffer.write( byte )
      endForEach
      return input_buffer->String

    method read_line( prompt:String )->String
      write prompt
      return read_line

    method read_line( prompt:StringBuilder )->String
      write prompt
      return read_line

    method reset_input_mode
      native @|#if (ROGUE_CONSOLE_FULL)
              |  tcsetattr( STDIN_FILENO, TCSANOW, &$this->original_terminal_settings );
              |  fcntl( STDIN_FILENO, F_SETFL, $this->original_stdin_flags );
              |#endif

    method restore_cursor_position
      print( "\e[u" ).flush

    method set_is_blocking( setting:Logical )->this
      native @|#if (ROGUE_CONSOLE_FULL)

      if (@is_blocking != setting)
        @is_blocking = setting
        if (@is_blocking)
          native @|fcntl( STDIN_FILENO, F_SETFL, O_NONBLOCK );
        else
          native @|fcntl( STDIN_FILENO, F_SETFL, $this->original_stdin_flags );
        endIf
      endIf

      native @|#endif

      return this

    method save_cursor_position
      print( "\e[s" ).flush

    method set_cursor( x:Int32, y:Int32 )
      print( "\e[" ).print( y ).print( ';' ).print( x ).print( 'H' ).flush

    method set_immediate_mode( setting:Logical )->this
      native @|#if (ROGUE_CONSOLE_FULL)

      if (@immediate_mode != setting)
        @immediate_mode = setting
        if (@immediate_mode)
          # Turn off blocking and line buffering
          is_blocking = false
          native @|termios new_settings;
                  |tcgetattr( STDIN_FILENO, &new_settings );
                  |new_settings.c_lflag &= ~(ECHO | ECHOE | ICANON);
                  |new_settings.c_cc[VMIN] = 0;
                  |new_settings.c_cc[VTIME] = 0;
                  |tcsetattr( STDIN_FILENO, TCSANOW, &new_settings );
        else
          is_blocking = true
          native @|tcsetattr( STDIN_FILENO, TCSANOW, &$this->original_terminal_settings );
        endIf
      endIf

      native @|#endif
      return this

    method width->Int32
      native @|#if (ROGUE_CONSOLE_FULL)
              |  struct winsize sz;
              |  ioctl( STDOUT_FILENO, TIOCGWINSZ, &sz );
              |
              |  return sz.ws_col;
              |#else
              |  return 80;
              |#endif

    method write( value:String )->this
      $if (target("Android"))
        native @|__android_log_print( ANDROID_LOG_INFO, "Rogue", "%s", $value->utf8 );
      $else
        native @|fwrite( $value->utf8, 1, $value->byte_count, stdout );
                |fflush( stdout );
      $endIf
      return this

    method write( buffer:StringBuilder )->this
      #buffer.reserve( 1 ).utf8.last = 0
      $if (target("Android"))
        buffer.reserve(1).utf8[ buffer.count ] = 0  # null terminate
        native @|__android_log_print( ANDROID_LOG_INFO, "Rogue", "%s", $buffer->utf8->data->as_bytes );
      $else
        native @|fwrite( $buffer->utf8->data->as_bytes, 1, $buffer->utf8->count, stdout );
                |fflush( stdout );
      $endIf
      return this

endClass

class ConsoleErrorPrinter : BufferedPrintWriter<<output_buffer>>
  METHODS
    method flush( buffer:StringBuilder )
      write( buffer )
      buffer.clear

    method write( value:String )->this
      $if (target("Android"))
        native @|__android_log_print( ANDROID_LOG_ERROR, "Rogue", "%s", $value->utf8 );
      $else
        native @|fwrite( $value->utf8, 1, $value->byte_count, stderr );
                |fflush( stderr );
      $endIf
      return this

    method write( buffer:StringBuilder )->this
      $if (target("Android"))
        buffer.reserve(1).utf8[ buffer.count ] = 0  # null terminate
        native @|__android_log_print( ANDROID_LOG_ERROR, "Rogue", "%s", $buffer->utf8->data->as_bytes );
      $else
        native @|fwrite( $buffer->utf8->data->as_bytes, 1, $buffer->utf8->count, stderr );
                |fflush( stderr );
      $endIf
      return this

endClass

class ConsoleStyle
  # USAGE
  #   println "$Hello World!$" (ConsoleStyle().fg_white.bg_red, ConsoleStyle().reset)
  #
  # OR
  #   ConsoleStyle.print( ConsoleStyle.FG_WHITE )
  #   ConsoleStyle.print( ConsoleStyle.BG_RED )
  #   print( "Hello World!" )
  #   ConsoleStyle.print( ConsoleStyle.RESET )
  #   println
  GLOBAL PROPERTIES
    RESET            = 0
    BOLD             = 1
    DIM              = 2
    UNDERLINE        = 4
    BLINK            = 5
    INVERSE          = 7
    HIDDEN           = 8
    BOLD_OFF         = 22
    DIM_OFF          = 22
    UNDERLINE_OFF    = 24
    BLINK_OFF        = 25
    INVERSE_OFF      = 27
    HIDDEN_OFF       = 28

    FG_DEFAULT       = 39
    FG_BLACK         = 30
    FG_RED           = 31
    FG_GREEN         = 32
    FG_YELLOW        = 33
    FG_BLUE          = 34
    FG_MAGENTA       = 35
    FG_CYAN          = 36
    FG_LIGHT_GRAY    = 37
    FG_DARK_GRAY     = 90
    FG_LIGHT_RED     = 91
    FG_LIGHT_GREEN   = 92
    FG_LIGHT_YELLOW  = 93
    FG_LIGHT_BLUE    = 94
    FG_LIGHT_MAGENTA = 95
    FG_LIGHT_CYAN    = 96
    FG_WHITE         = 97

    BG_DEFAULT       = 49
    BG_BLACK         = 40
    BG_RED           = 41
    BG_GREEN         = 42
    BG_YELLOW        = 43
    BG_BLUE          = 44
    BG_MAGENTA       = 45
    BG_CYAN          = 46
    BG_LIGHT_GRAY    = 47
    BG_DARK_GRAY     = 100
    BG_LIGHT_RED     = 101
    BG_LIGHT_GREEN   = 102
    BG_LIGHT_YELLOW  = 103
    BG_LIGHT_BLUE    = 104
    BG_LIGHT_MAGENTA = 105
    BG_LIGHT_CYAN    = 106
    BG_WHITE         = 107

  GLOBAL METHODS
    method print( code:Int32 )
      Global.print( "\e[" )
      Global.print( code )
      Global.print( "m" )

    method print( code:Int32, builder:StringBuilder )
      builder.print( "\e[" ).print( code ).print( "m" )

  PROPERTIES
    codes = Int32[]

  METHODS
    method clear
      codes.clear

    method print( builder:StringBuilder )
      if (codes.is_empty) return
      builder.print "\e["
      forEach (code at i in codes)
        if (i > 0) builder.print ';'
        builder.print code
      endForEach
      builder.print "m"

    method to->String
      if (codes.is_empty) return ""
      return "\e[$m" (codes.join(";"))
endClass

# Use metacode to generate a modifier method for each code.
# For example, for FG_RED the following method is generated:
#   method fg_red->this
#     codes.add( FG_RED )
#     return this
$metacode<ConsoleStyle.organize_methods>
forEach (p in global_list)
  sourceln "method $->this" (p.name.to_lowercase)
  sourceln "  codes.add( $ )" (p.name)
  sourceln "  return this"
  injectMethod
endForEach
$endMetacode

