class Value
  GLOBAL METHODS
    method create( value:Int32 )->Value
      return Int32Value( value )

    method create( value:Logical )->Value
      return select{ value:LogicalValue.true_value || LogicalValue.false_value }

    method create( value:Real64 )->Value
      return Real64Value( value )

    method create( value:Object )->Value
      return ObjectValue( value )

    method create( value:String )->Value
      return StringValue( value )

    method operator?( value:Value )->Logical
      return (value is not null and value.is_non_null)

  METHODS
    method add( value:Int32 )->this [macro]
      this.add( Value(value) )

    method add( value:Logical )->this [macro]
      this.add( Value(value) )

    method add( value:Real64 )->this [macro]
      this.add( Value(value) )

    method add( value:Object )->this [macro]
      this.add( Value(value) )

    method add( value:String )->this [macro]
      this.add( Value(value) )

    method add( value:Value )->this
      return this

    method add( other:Value[] )->this
      return this

    method clear->this
      return this

    method cloned->Value
      return this

    method contains( table_key_or_list_value:String )->Logical
      return false

    method contains( table_key_or_list_value:Value )->Logical
      return false

    method count->Int32
      return 0

    method ensure_list( key:String )->ValueList
      # When called on a ValueTable, ensures that the table contains a list
      # with the given key, creating it if necessary, and returns that list.
      # When called on any other type of Value, a new ValueList
      # will be returned but it won't be stored in a table.
      return @[]

    method ensure_table( key:String )->ValueTable
      # When called on a ValueTable, ensures that the table contains a table
      # with the given key, creating it if necessary, and returns that table.
      # When called on any other type of Value, a new ValueTable
      # will be returned but it won't be stored in a table.
      return @{}

    method first->Value
      return NullValue

    method get( index:Int32 )->Value
      return NullValue

    method get( key:String )->Value
      return NullValue

    method is_collection->Logical
      return false

    method is_complex->Logical
      if (not is_collection) return false
      if (count > 1)         return true
      forEach (value in this)
        if (value and value.is_complex) return true
      endForEach
      return false

    method is_int32->Logical
      return false

    method is_list->Logical
      return false

    method is_logical->Logical
      return false

    method is_null->Logical
      return false

    method is_non_null->Logical
      return true

    method is_number->Logical
      return false

    method is_object->Logical
      return false

    method is_real64->Logical
      return false

    method is_string->Logical
      return false

    method is_table->Logical
      return false

    method last->Value
      return NullValue

    method operator==( other:Value )->Logical
      return this is other

    method operator<( other:Value )->Logical
      return object_id < other.object_id

    method operator-()->Value
      return Value( 0 )

    method operator+( other:Value )->Value
      return Value( 0 )

    method operator-( other:Value )->Value
      return Value( 0 )

    method operator*( other:Value )->Value
      return Value( 0 )

    method operator/( other:Value )->Value
      return Value( 0 )

    method operator%( other:Value )->Value
      return Value( 0 )

    method operator+( other:Real64 )->Value
      return Value( 0 )

    method operator-( other:Real64 )->Value
      return Value( 0 )

    method operator*( other:Real64 )->Value
      return Value( 0 )

    method operator/( other:Real64 )->Value
      return Value( 0 )

    method operator%( other:Real64 )->Value
      return Value( 0 )

    method operator+( other:String )->Value
      return Value( 0 )

    method operator*( other:String )->Value
      return Value( 0 )

    method remove( value:Value )->Value
      return value

    method remove( key:String )->Value
      return NullValue

    method remove_at( index:Int32 )->Value
      return NullValue

    method remove_first->Value
      return NullValue

    method remove_last->Value
      return NullValue

    method save( file:File, formatted=false:Logical )->Logical
      return file.save( to_json(formatted) )

    method set( index:Int32, value:Int32 )->this [macro]
      this.set( index, Value(value) )

    method set( index:Int32, value:Logical )->this [macro]
      this.set( index, Value(value) )

    method set( index:Int32, value:Real64 )->this [macro]
      this.set( index, Value(value) )

    method set( index:Int32, value:Object )->this [macro]
      this.set( index, Value(value) )

    method set( index:Int32, value:String )->this [macro]
      this.set( index, Value(value) )

    method set( index:Int32, value:Value )->this
      return this

    method set( key:String, value:Int32 )->this [macro]
      this.set( key, Value(value) )

    method set( key:String, value:Logical )->this [macro]
      this.set( key, Value(value) )

    method set( key:String, value:Real64 )->this [macro]
      this.set( key, Value(value) )

    method set( key:String, value:Object )->this [macro]
      this.set( key, Value(value) )

    method set( key:String, value:String )->this [macro]
      this.set( key, Value(value) )

    method set( key:String, value:Value )->this
      return this

    method sort( compare_fn:Function(a:Value,b:Value)->Logical )->this
      return this

    method sorted( compare_fn:Function(a:Value,b:Value)->Logical )->Value
      return cloned

    method to->Int32
      return 0

    method to->Logical
      return (this->Int32)

    method to->Real64
      return this->Int32->Real64

    method to->Object
      return null

    method to->ValueList
      return select{ this.is_list:this as ValueList || @[] }

    method to->ValueTable
      return select{ this.is_table:this as ValueTable || @{} }

    method to<<$AsType>>()->$AsType [macro]
      (this->Object as $AsType)

    method to_json( formatted=false:Logical )->String
      return to_json( StringBuilder(), formatted )->String

    method to_json( buffer:StringBuilder, formatted=false:Logical )->StringBuilder
      return buffer

$if ("Cython")
    method _get_element( index:Int32 )->Value [requisite]
      throw Error("This Value is not indexable")
$endIf
endClass

class NullValue : Value [singleton]
  METHODS
    method is_non_null->Logical
      return false

    method is_null->Logical
      return true

    method operator==( other:Value )->Logical
      return  (other is null or other.is_null)

    method operator<( other:Value )->Logical
      return (other and other.is_non_null)

    method to->Int32
      return 0

    method to->String
      return ""

    method to_json( buffer:StringBuilder, formatted=false:Logical )->StringBuilder
      return buffer.print( "null" )
endClass

class Int32Value( value:Int32 ) : Value
  METHODS
    method is_int32->Logical
      return true

    method is_number->Logical
      return true

    method operator==( other:Value )->Logical
      if (other.is_number) return (value == other->Real64)
      else                 return false

    method operator<( other:Value )->Logical
      if (other.is_number) return (value < other->Real64)
      else                 return object_id < other.object_id

    method operator-()->Value
      return Int32Value( -value )

    method operator+( other:Value )->Value
      if (not other) return Value(0)
      return Int32Value( value + other->Int32 )

    method operator-( other:Value )->Value
      if (not other) return Value(0)
      return Int32Value( value - other->Int32 )

    method operator*( other:Value )->Value
      if (not other) return Value(0)
      return Int32Value( value * other->Int32 )

    method operator/( other:Value )->Value
      if (not other) return Value(0)
      return Int32Value( value / other->Int32 )

    method operator%( other:Value )->Value
      if (not other) return Value(0)
      return Int32Value( value % other->Int32 )

    method operator+( other:Real64 )->Value
      if (not other) return Value(0)
      return Int32Value( value + other )

    method operator-( other:Real64 )->Value
      if (not other) return Value(0)
      return Int32Value( value + other )

    method operator*( other:Real64 )->Value
      if (not other) return Value(0)
      return Int32Value( value + other )

    method operator/( other:Real64 )->Value
      if (not other) return Value(0)
      return Int32Value( value + other )

    method operator%( other:Real64 )->Value
      if (not other) return Value(0)
      return Int32Value( value + other )

    method operator+( other:String )->Value
      if (not other) return Value(0)
      return StringValue( value + other )

    method operator*( other:String )->Value
      if (not other) return Value(0)
      return StringValue( value * other )

    method to->Int32
      return value

    method to->String
      return value->String

    method to_json( buffer:StringBuilder, formatted=false:Logical )->StringBuilder
      buffer.print( value )
      return buffer
endClass

class LogicalValue( value:Logical ) : Value
  GLOBAL PROPERTIES
    true_value  = LogicalValue( true )
    false_value = LogicalValue( false )

  METHODS
    method is_logical->Logical
      return true

    method to->Int32
      if (value) return 1
      else       return 0

    method to->Logical
      return value

    method to->String
      return value->String

    method to_json( buffer:StringBuilder, formatted=false:Logical )->StringBuilder
      buffer.print( value )
      return buffer
endClass

class Real64Value( value:Real64 ) : Value
  METHODS
    method is_number->Logical
      return true

    method is_real64->Logical
      return true

    method operator==( other:Value )->Logical
      if (other.is_number) return (value == other->Real64)
      else                 return false

    method operator<( other:Value )->Logical
      if (other.is_number) return (value < other->Real64)
      else                 return object_id < other.object_id

    method operator-()->Value
      return Real64Value( -value )

    method operator+( other:Value )->Value
      if (not other) return Value(0)
      return Real64Value( value + other->Real64 )

    method operator-( other:Value )->Value
      if (not other) return Value(0)
      return Real64Value( value - other->Real64 )

    method operator*( other:Value )->Value
      if (not other) return Value(0)
      return Real64Value( value * other->Real64 )

    method operator/( other:Value )->Value
      if (not other) return Value(0)
      return Real64Value( value / other->Real64 )

    method operator%( other:Value )->Value
      if (not other) return Value(0)
      return Real64Value( value % other->Real64 )

    method operator+( other:Real64 )->Value
      if (not other) return Value(0)
      return Real64Value( value + other )

    method operator-( other:Real64 )->Value
      if (not other) return Value(0)
      return Real64Value( value + other )

    method operator*( other:Real64 )->Value
      if (not other) return Value(0)
      return Real64Value( value + other )

    method operator/( other:Real64 )->Value
      if (not other) return Value(0)
      return Real64Value( value + other )

    method operator%( other:Real64 )->Value
      if (not other) return Value(0)
      return Real64Value( value + other )

    method operator+( other:String )->Value
      if (not other) return Value(0)
      return StringValue( value + other )

    method operator*( other:String )->Value
      if (not other) return Value(0)
      return StringValue( Int32(value) * other )

    method to->Int32
      return value

    method to->Real64
      return value

    method to->String
      return value->String

    method to_json( buffer:StringBuilder, formatted=false:Logical )->StringBuilder
      buffer.print( value )
      return buffer
endClass

class ObjectValue( value:Object ) : Value
  METHODS
    method is_object->Logical
      return true

    method to->Object
      return value

    method to->String
      return value->String

    method to_json( buffer:StringBuilder, formatted=false:Logical )->StringBuilder
      buffer.print( value->String )
      return buffer
endClass

class StringValue( value:String ) : Value
  GLOBAL PROPERTIES
    empty_string = StringValue( "" )

  METHODS
    method is_string->Logical
      return true

    method operator==( other:Value )->Logical
      if (other.is_string) return (value == other->String)
      else                 return false

    method operator<( other:Value )->Logical
      if (other.is_string) return (value < other->String)
      else                 return object_id < other.object_id

    method operator+( other:Value )->Value
      if (not other) return Value(0)
      return StringValue( value + other->String )

    method operator*( other:Value )->Value
      if (not other) return Value(0)
      return StringValue( value * other->Int32 )

    method operator+( other:Real64 )->Value
      if (not other) return Value(0)
      return StringValue( value + other )

    method operator+( other:String )->Value
      if (not other) return Value(0)
      return StringValue( value + other )

    method to->Character
      if (value.count > 0) return value[0]
      else                 return 0->Character

    method to->Int32
      return value->Int32

    method to->Logical
      return (value == "true" or value == "TRUE" or value == "yes" or value == "YES" or value == "1")

    method to->Real64
      return value->Real64

    method to->String
      return value

    method to_json( buffer:StringBuilder, formatted=false:Logical )->StringBuilder
      return to_json( value, buffer, formatted )

  GLOBAL METHODS
    method to_json( value:String, buffer:StringBuilder, formatted=false:Logical )->StringBuilder
      if (value)
        buffer.print '"'
        forEach (ch in value)
          which (ch)
            case '"':
              buffer.print( "\\\"" )
            case '\\':
              buffer.print( "\\\\" )
            case '\b':
              buffer.print( "\\b" )
            case '\f':
              buffer.print( "\\f" )
            case '\n':
              buffer.print( "\\n" )
            case '\r':
              buffer.print( "\\r" )
            case '\t':
              buffer.print( "\\t" )
            others
              if (ch >= 32 and ch <= 126)
                buffer.print( ch )
              elseIf (ch < 32 or ch == 127 or ch == 0x2028 or ch == 0x2029)
                # RE: 2028/9:
                # http://stackoverflow.com/questions/2965293/javascript-parse-error-on-u2028-unicode-character
                buffer.print( "\\u" )
                local n = ch : Int32
                forEach (nibble in 0..3)
                  local digit = (n :>>>: 12) & 15
                  n = n:<<:4
                  if (digit <= 9)
                    buffer.print( digit )
                  else
                    buffer.print( ('a' + (digit - 10))->Character )
                  endIf
                endForEach
              else
                # Store printable Unicode without encoding as \\uXXXX
                buffer.print( ch )
              endIf
          endWhich
        endForEach
        buffer.print '"'
      else
        buffer.print "null"
      endIf
      return buffer
endClass

class ValueList : Value
  PROPERTIES
    values : Value[]

  METHODS
    method init
      init( 10 )

    method init( initial_capacity:Int32 )
      values = Value[]( initial_capacity )

    method init( values )

    method cloned->ValueList
      return ValueList( values.cloned )

    method add( value:Value )->this
      values.add( value )
      return this

    method add( other:Value[] )->this
      values.reserve(other.count)
      forEach (value in other) values.add( value )
      return this

    method clear->ValueList
      values.clear
      return this

    method contains( value:String )->Logical
      forEach (existing in values)
        if (existing and existing.is_string and existing->String == value) return true
      endForEach
      return false

    method contains( value:Value )->Logical
      forEach (existing in values)
        if (existing and existing == value) return true
      endForEach
      return false

    method count->Int32
      return values.count

    method first->Value
      return this.get(0)

    method get( index:Int32 )->Value
      if (index < 0 or index >= values.count) return NullValue
      return select{ values[index] || NullValue }

    method is_collection->Logical
      return true

    method is_list->Logical
      return true

    method last->Value
      return this.get( values.count - 1 )

    method remove( value:Value )->Value
      return values.remove( value )

    method remove_at( index:Int32 )->Value
      return values.remove_at( index )

    method remove_first->Value
      return values.remove_first

    method remove_last->Value
      return values.remove_last

    method set( index:Int32, new_value:Value )->Value
      if (index < 0) return this

      while (index >= values.count) add( null as Value )
      values.set( index, new_value )

      return this

    method sort( compare_fn:Function(a:Value,b:Value)->Logical )->this
      values.sort( compare_fn )
      return this

    method sorted( compare_fn:Function(a:Value,b:Value)->Logical )->ValueList
      return cloned.sort( compare_fn ) as ValueList

    method to->String
      return values->String

    method to_json( buffer:StringBuilder, formatted=false:Logical )->StringBuilder
      local pretty_print = (formatted and is_complex)

      buffer.print( '[' )

      if (pretty_print)
        buffer.println
        buffer.indent += 2
      endIf

      local first = true
      forEach (value in values)
        if (first)
          first = false
        else
          buffer.print( ',' )
          if (pretty_print) buffer.println
        endIf

        if (value) value.to_json( buffer, formatted )
        else       buffer.print( "null" )
      endForEach

      if (pretty_print)
        buffer.println
        buffer.indent -= 2
      endIf

      buffer.print( ']' )
      return buffer

$if ("Cython")
    method _get_element( index:Int32 )->Value [requisite]
      if (index < 0 or index >= count)
        throw Error("Index out of range")
      endIf
      return get(index)
$endIf

    GLOBAL METHODS
      method load( file:File )->ValueList
        if (not file or not file.exists) return ValueList()
        return JSON.parse_list( file.load_as_string )

      method parse( json:String )->ValueList
        return JSON.parse_list( json )
endClass

class ValueTable : Value
  PROPERTIES
    values    : Table<<String,Value>>

  METHODS
    method init
      values = Table<<String,Value>>()

    method init( values )

    method clear->this
      values.clear
      return this

    method cloned->ValueTable
      return ValueTable( values.cloned )

    method contains( key:String )->Logical
      return values.contains( key )

    method contains( key:Value )->Logical
      if (not key or not key.is_string) return false
      return contains( key->String )

    method count->Int32
      return values.count

    method ensure_list( key:String )->ValueList
      # Ensures that this table contains a list with the given key, creating
      # it if necessary, and returns that list.
      local list = this[ key ] as ValueList
      if (list) return list
      list = @[]
      this[ key ] = list
      return list

    method ensure_table( key:String )->ValueTable
      # Ensures that this table contains a table with the given key, creating
      # it if necessary, and returns that table.
      local table = this[ key ] as ValueTable
      if (table) return table
      table = @{}
      this[ key ] = table
      return table

    method get( index:Int32 )->Value
      if (index < 0 or index >= count) return NullValue
      return select{ values[ keys[index] ] || NullValue }

    method get( key:String )->Value
      return select{ values[ key ] || NullValue }

    method is_collection->Logical
      return true

    method is_table->Logical
      return true

    method keys->String[] [macro]
      values.keys

    method remove( key:String )->Value
      return values.remove( key )

    method remove_at( index:Int32 )->Value
      if (index < 0 or index >= count) return NullValue
      return values.remove( values.keys[index] )

    method set( key:String, new_value:Value )->this
      values.set( key, new_value )
      return this

    method to->String
      return values->String

    method to_json( buffer:StringBuilder, formatted=false:Logical )->StringBuilder
      local pretty_print = (formatted and is_complex)

      buffer.print( '{' )

      if (pretty_print)
        buffer.println
        buffer.indent += 2
      endIf

      local first = true
      forEach (key in values.keys)
        if (first)
          first = false
        else
          buffer.print( ',' )
          if (pretty_print) buffer.println
        endIf

        StringValue.to_json( key, buffer, formatted )
        buffer.print( ':' )

        local value = values[key]
        if (pretty_print and value and value.is_complex) buffer.println

        if (value) value.to_json( buffer, formatted )
        else       buffer.print( "null" )
      endForEach

      if (pretty_print) buffer.println; buffer.indent -= 2

      buffer.print( '}' )
      return buffer

$if ("Cython")
    method _get_element( index:Int32 )->Value [requisite]
      if (index < 0 or index >= count)
        throw Error("Index out of range")
      endIf
      return get(index)

    method _get_element( key:String )->Value [requisite]
      return get(key)
$endIf

    GLOBAL METHODS
      method load( file:File )->ValueTable
        if (not file or not file.exists) return ValueTable()
        return JSON.parse_table( file.load_as_string )

      method parse( json:String )->ValueTable
        return JSON.parse_table( json )
endClass
